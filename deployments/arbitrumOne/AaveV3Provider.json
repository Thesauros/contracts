{
  "address": "0xbeEdb89DC47cab2678eBB796cfc8131062F16E39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4550eb41fc60cc877e4c3ded9aba580d6f7b8665191a5faac7710d309aedeb01",
  "receipt": {
    "to": null,
    "from": "0xafA9ed53c33bbD8DE300481ce150dB3D35738F9D",
    "contractAddress": "0xbeEdb89DC47cab2678eBB796cfc8131062F16E39",
    "transactionIndex": 1,
    "gasUsed": "604975",
    "logsBloom": "0x
    "blockHash": "0xff2a80f5cf3ebbe1918f32f25afbdcdccdd48f05a829403267c33117e6b33378",
    "transactionHash": "0x4550eb41fc60cc877e4c3ded9aba580d6f7b8665191a5faac7710d309aedeb01",
    "logs": [],
    "blockNumber": 380759364,
    "cumulativeGasUsed": "604975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "53845f148122078400c4117c15408892",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to deposit.\",\"vault\":\"The vault calling this function.\"}},\"getDepositBalance(address,address)\":{\"params\":{\"user\":\"The address of the user whose balance is needed.\",\"vault\":\"The vault required by specific providers with multi-markets; otherwise, pass address(0).\"}},\"getDepositRate(address)\":{\"details\":\"Must return the rate in ray units (1e27).\",\"params\":{\"vault\":\"The vault required by specific provider with multi-markets; otherwise, pass address(0).\"}},\"getSource(address,address,address)\":{\"details\":\"Some provider implementations may not require all keys.\",\"params\":{\"keyOne\":\"The first key for identification\",\"keyThree\":\"The third key for identification\",\"keyTwo\":\"The second key for identification\"}},\"withdraw(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to withdraw.\",\"vault\":\"The vault calling this function.\"}}},\"title\":\"AaveV3Provider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,address)\":{\"notice\":\"Performs a deposit at the provider on behalf of a vault.\"},\"getDepositBalance(address,address)\":{\"notice\":\"Returns the deposit balance of a user at the provider.\"},\"getDepositRate(address)\":{\"notice\":\"Returns the latest supply annual percentage rate (APR) at the provider.\"},\"getIdentifier()\":{\"notice\":\"Returns the identifier of the provider.\"},\"getSource(address,address,address)\":{\"notice\":\"Returns the source address that requires ERC20 approval for vault actions.\"},\"withdraw(uint256,address)\":{\"notice\":\"Performs a withdraw at the provider on behalf of a vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/providers/AaveV3Provider.sol\":\"AaveV3Provider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4626.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x23460d4a98e568bde8b7ecaa2316853778032106b489c03be29db1abb0e712c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"contracts/interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title IProvider\\n */\\ninterface IProvider {\\n    /**\\n     * @notice Returns the identifier of the provider.\\n     */\\n    function getIdentifier() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the source address that requires ERC20 approval for vault actions.\\n     *\\n     * @param keyOne The first key for identification\\n     * @param keyTwo The second key for identification\\n     * @param keyThree The third key for identification\\n     *\\n     * @dev Some provider implementations may not require all keys.\\n     */\\n    function getSource(\\n        address keyOne,\\n        address keyTwo,\\n        address keyThree\\n    ) external view returns (address source);\\n\\n    /**\\n     * @notice Performs a deposit at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to deposit.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Performs a withdraw at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to withdraw.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Returns the deposit balance of a user at the provider.\\n     *\\n     * @param user The address of the user whose balance is needed.\\n     * @param vault The vault required by specific providers with multi-markets; otherwise, pass address(0).\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Returns the latest supply annual percentage rate (APR) at the provider.\\n     *\\n     * @param vault The vault required by specific provider with multi-markets; otherwise, pass address(0).\\n     *\\n     * @dev Must return the rate in ray units (1e27).\\n     */\\n    function getDepositRate(IVault vault) external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IProvider} from \\\"./IProvider.sol\\\";\\n\\n/**\\n * @title IVault\\n */\\ninterface IVault is IERC4626 {\\n    /**\\n     * @notice Emitted when the vault setup is completed.\\n     *\\n     * @param setupAddress The address that performed the vault setup.\\n     */\\n    event SetupCompleted(address indexed setupAddress);\\n\\n    /**\\n     * @notice Emitted when the timelock contract is changed.\\n     *\\n     * @param timelock The new timelock contract address.\\n     */\\n    event TimelockUpdated(address indexed timelock);\\n\\n    /**\\n     * @notice Emitted when the available providers for the vault change.\\n     *\\n     * @param providers The new array of providers.\\n     */\\n    event ProvidersUpdated(IProvider[] providers);\\n\\n    /**\\n     * @notice Emitted when the active provider is changed.\\n     *\\n     * @param activeProvider The new active provider.\\n     */\\n    event ActiveProviderUpdated(IProvider activeProvider);\\n\\n    /**\\n     * @notice Emitted when the treasury address is changed.\\n     *\\n     * @param treasury The new treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the withdrawal fee percentage is changed.\\n     *\\n     * @param withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    event WithdrawFeePercentUpdated(uint256 withdrawFeePercent);\\n\\n    /**\\n     * @notice Emitted when the minimum amount is changed.\\n     *\\n     * @param minAmount The new minimum amount.\\n     */\\n    event MinAmountUpdated(uint256 minAmount);\\n\\n    /**\\n     * @notice Emitted when a fee is charged.\\n     *\\n     * @param treasury The treasury address of the vault.\\n     * @param assets The total amount from which the fee is charged.\\n     * @param fee The amount charged.\\n     */\\n    event FeeCharged(address indexed treasury, uint256 assets, uint256 fee);\\n\\n    /**\\n     * @notice Emitted when the vault is rebalanced.\\n     *\\n     * @param assetsFrom The amount of assets rebalanced from.\\n     * @param assetsTo The amount of assets rebalanced to.\\n     * @param from The provider from which assets are rebalanced.\\n     * @param to The provider to which assets are rebalanced.\\n     */\\n    event RebalanceExecuted(\\n        uint256 assetsFrom,\\n        uint256 assetsTo,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred.\\n     *\\n     * @param to The address to which rewards are transferred.\\n     * @param amount The amount of rewards transferred.\\n     */\\n    event RewardsTransferred(address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the rewards distributor contract is changed.\\n     *\\n     * @param rewardsDistributor The new rewards distributor contract address.\\n     */\\n    event DistributorUpdated(address indexed rewardsDistributor);\\n\\n    /**\\n     * @notice Sets up the vault with a specified amount of assets to prevent inflation attacks.\\n     * @dev Refer to: https://rokinot.github.io/hatsfinance\\n     *\\n     * @param assets The amount used to set up the vault.\\n     */\\n    function setupVault(uint256 assets) external;\\n\\n    /**\\n     * @notice Performs rebalancing of the vault by moving funds across providers.\\n     * @param assets The amount of assets to be rebalanced.\\n     * @param from The provider currently holding the assets.\\n     * @param to The provider receiving the assets.\\n     * @param fee The fee amount charged for the rebalancing.\\n     * @param activateToProvider A flag indicating whether to mark the receiving provider as active.\\n     */\\n    function rebalance(\\n        uint256 assets,\\n        IProvider from,\\n        IProvider to,\\n        uint256 fee,\\n        bool activateToProvider\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4\",\"license\":\"MIT\"},\"contracts/interfaces/aaveV3/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n * @dev Modified version of the original Aave interface.\\n */\\ninterface IPool {\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n        uint256 data;\\n    }\\n\\n    struct ReserveData {\\n        // Stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // The liquidity index. Expressed in ray.\\n        uint128 liquidityIndex;\\n        // The current supply rate. Expressed in ray.\\n        uint128 currentLiquidityRate;\\n        // Variable borrow index. Expressed in ray.\\n        uint128 variableBorrowIndex;\\n        // The current variable borrow rate. Expressed in ray.\\n        uint128 currentVariableBorrowRate;\\n        // The current stable borrow rate. Expressed in ray.\\n        uint128 currentStableBorrowRate;\\n        // Timestamp of last update.\\n        uint40 lastUpdateTimestamp;\\n        // The id of the reserve. Represents the position in the list of the active reserves.\\n        uint16 id;\\n        // aToken address.\\n        address aTokenAddress;\\n        // StableDebtToken address.\\n        address stableDebtTokenAddress;\\n        // VariableDebtToken address.\\n        address variableDebtTokenAddress;\\n        // Address of the interest rate strategy.\\n        address interestRateStrategyAddress;\\n        // The current treasury balance, scaled.\\n        uint128 accruedToTreasury;\\n        // The outstanding unbacked aTokens minted through the bridging feature.\\n        uint128 unbacked;\\n        // The outstanding debt borrowed against this asset in isolation mode.\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0x3695e548663a20d1fcacc7bee1e65b5eb83f1b8d3d5d10256db161cec9e93fc0\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/aaveV3/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n * @dev Reduced version of the original Aave interface.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc8a7c6abd956b8a2b56a8b99fe374779bd8cce905baa5f48d8e05a32500bf9f6\",\"license\":\"AGPL-3.0\"},\"contracts/providers/AaveV3Provider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPool} from \\\"../interfaces/aaveV3/IPool.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../interfaces/aaveV3/IPoolAddressesProvider.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IProvider} from \\\"../interfaces/IProvider.sol\\\";\\n\\n/**\\n * @title AaveV3Provider\\n */\\ncontract AaveV3Provider is IProvider {\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external override returns (bool success) {\\n        IPool aave = _getPool();\\n        aave.supply(vault.asset(), amount, address(vault), 0);\\n        success = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external override returns (bool success) {\\n        IPool aave = _getPool();\\n        aave.withdraw(vault.asset(), amount, address(vault));\\n        success = true;\\n    }\\n\\n    /**\\n     * @dev Returns the Pool contract of Aave V3\\n     */\\n    function _getPool() internal view returns (IPool) {\\n        IPoolAddressesProvider addressesProvider = _getPoolAddressesProvider();\\n        return IPool(addressesProvider.getPool());\\n    }\\n\\n    /**\\n     * @dev Returns the PoolAddressesProvider contract of Aave V3.\\n     */\\n    function _getPoolAddressesProvider()\\n        internal\\n        pure\\n        returns (IPoolAddressesProvider)\\n    {\\n        return\\n            IPoolAddressesProvider(0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view override returns (uint256 balance) {\\n        IPool aave = _getPool();\\n        IPool.ReserveData memory rdata = aave.getReserveData(vault.asset());\\n        balance = IERC20(rdata.aTokenAddress).balanceOf(user);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositRate(\\n        IVault vault\\n    ) external view override returns (uint256 rate) {\\n        IPool aave = _getPool();\\n        IPool.ReserveData memory rdata = aave.getReserveData(vault.asset());\\n        rate = rdata.currentLiquidityRate;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getSource(\\n        address,\\n        address,\\n        address\\n    ) external view override returns (address source) {\\n        source = address(_getPool());\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getIdentifier() public pure override returns (string memory) {\\n        return \\\"Aave_V3_Provider\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x4bfdad9d09d40beed41f4c45c7c08743a6ebee66c3e5b468a37599618e991431\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062f714ce146100665780630ae112a41461008e5780634c8f411d146100af5780636e553f65146100c257806373f64d44146100d5578063aa23e03d146100f5575b600080fd5b61007961007436600461061b565b610127565b60405190151581526020015b60405180910390f35b6100a161009c36600461064b565b610229565b604051908152602001610085565b6100a16100bd366004610679565b610385565b6100796100d036600461061b565b610478565b6100e86100e336600461069d565b61056f565b60405161008591906106e8565b604080518082018252601081526f20b0bb32afab19afa83937bb34b232b960811b6020820152905161008591906106fc565b600080610132610581565b9050806001600160a01b03166369328dec846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a5919061075b565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201526024810188905290861660448201526064016020604051808303816000875af11580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610778565b506001949350505050565b600080610234610581565b90506000816001600160a01b03166335ea6a75856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a9919061075b565b6040518263ffffffff1660e01b81526004016102c591906106e8565b6101e060405180830381865afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610855565b6101008101516040516370a0823160e01b81529192506001600160a01b0316906370a082319061033b9088906004016106e8565b602060405180830381865afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190610778565b95945050505050565b600080610390610581565b90506000816001600160a01b03166335ea6a75856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610405919061075b565b6040518263ffffffff1660e01b815260040161042191906106e8565b6101e060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610855565b604001516001600160801b0316949350505050565b600080610483610581565b9050806001600160a01b031663617ba037846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f6919061075b565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015260248101889052908616604482015260006064820152608401600060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b506001979650505050505050565b6000610579610581565b949350505050565b60008073a97684ead0e402dc232d5a977953df7ecbab3cdb9050806001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd919061075b565b91505090565b6001600160a01b038116811461061857600080fd5b50565b6000806040838503121561062e57600080fd5b82359150602083013561064081610603565b809150509250929050565b6000806040838503121561065e57600080fd5b823561066981610603565b9150602083013561064081610603565b60006020828403121561068b57600080fd5b813561069681610603565b9392505050565b6000806000606084860312156106b257600080fd5b83356106bd81610603565b925060208401356106cd81610603565b915060408401356106dd81610603565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020808352835180602085015260005b8181101561072a5785810183015185820160400152820161070e565b506000604082860101526040601f19601f8301168501019250505092915050565b805161075681610603565b919050565b60006020828403121561076d57600080fd5b815161069681610603565b60006020828403121561078a57600080fd5b5051919050565b6040516101e081016001600160401b03811182821017156107c257634e487b7160e01b600052604160045260246000fd5b60405290565b6000602082840312156107da57600080fd5b604051602081016001600160401b038111828210171561080a57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516001600160801b038116811461075657600080fd5b805164ffffffffff8116811461075657600080fd5b805161ffff8116811461075657600080fd5b60006101e0828403121561086857600080fd5b610870610791565b61087a84846107c8565b815261088860208401610817565b602082015261089960408401610817565b60408201526108aa60608401610817565b60608201526108bb60808401610817565b60808201526108cc60a08401610817565b60a08201526108dd60c0840161082e565b60c08201526108ee60e08401610843565b60e082015261010061090181850161074b565b9082015261012061091384820161074b565b9082015261014061092584820161074b565b9082015261016061093784820161074b565b90820152610180610949848201610817565b908201526101a061095b848201610817565b908201526101c061096d848201610817565b90820152939250505056fea264697066735822122027cce677a8922896cfb2938cec252e212e0de8da0902add7820bfa3c5070cf7864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100615760003560e01c8062f714ce146100665780630ae112a41461008e5780634c8f411d146100af5780636e553f65146100c257806373f64d44146100d5578063aa23e03d146100f5575b600080fd5b61007961007436600461061b565b610127565b60405190151581526020015b60405180910390f35b6100a161009c36600461064b565b610229565b604051908152602001610085565b6100a16100bd366004610679565b610385565b6100796100d036600461061b565b610478565b6100e86100e336600461069d565b61056f565b60405161008591906106e8565b604080518082018252601081526f20b0bb32afab19afa83937bb34b232b960811b6020820152905161008591906106fc565b600080610132610581565b9050806001600160a01b03166369328dec846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a5919061075b565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201526024810188905290861660448201526064016020604051808303816000875af11580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610778565b506001949350505050565b600080610234610581565b90506000816001600160a01b03166335ea6a75856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a9919061075b565b6040518263ffffffff1660e01b81526004016102c591906106e8565b6101e060405180830381865afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610855565b6101008101516040516370a0823160e01b81529192506001600160a01b0316906370a082319061033b9088906004016106e8565b602060405180830381865afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190610778565b95945050505050565b600080610390610581565b90506000816001600160a01b03166335ea6a75856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610405919061075b565b6040518263ffffffff1660e01b815260040161042191906106e8565b6101e060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190610855565b604001516001600160801b0316949350505050565b600080610483610581565b9050806001600160a01b031663617ba037846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f6919061075b565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015260248101889052908616604482015260006064820152608401600060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b506001979650505050505050565b6000610579610581565b949350505050565b60008073a97684ead0e402dc232d5a977953df7ecbab3cdb9050806001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd919061075b565b91505090565b6001600160a01b038116811461061857600080fd5b50565b6000806040838503121561062e57600080fd5b82359150602083013561064081610603565b809150509250929050565b6000806040838503121561065e57600080fd5b823561066981610603565b9150602083013561064081610603565b60006020828403121561068b57600080fd5b813561069681610603565b9392505050565b6000806000606084860312156106b257600080fd5b83356106bd81610603565b925060208401356106cd81610603565b915060408401356106dd81610603565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020808352835180602085015260005b8181101561072a5785810183015185820160400152820161070e565b506000604082860101526040601f19601f8301168501019250505092915050565b805161075681610603565b919050565b60006020828403121561076d57600080fd5b815161069681610603565b60006020828403121561078a57600080fd5b5051919050565b6040516101e081016001600160401b03811182821017156107c257634e487b7160e01b600052604160045260246000fd5b60405290565b6000602082840312156107da57600080fd5b604051602081016001600160401b038111828210171561080a57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516001600160801b038116811461075657600080fd5b805164ffffffffff8116811461075657600080fd5b805161ffff8116811461075657600080fd5b60006101e0828403121561086857600080fd5b610870610791565b61087a84846107c8565b815261088860208401610817565b602082015261089960408401610817565b60408201526108aa60608401610817565b60608201526108bb60808401610817565b60808201526108cc60a08401610817565b60a08201526108dd60c0840161082e565b60c08201526108ee60e08401610843565b60e082015261010061090181850161074b565b9082015261012061091384820161074b565b9082015261014061092584820161074b565b9082015261016061093784820161074b565b90820152610180610949848201610817565b908201526101a061095b848201610817565b908201526101c061096d848201610817565b90820152939250505056fea264697066735822122027cce677a8922896cfb2938cec252e212e0de8da0902add7820bfa3c5070cf7864736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to deposit.",
          "vault": "The vault calling this function."
        }
      },
      "getDepositBalance(address,address)": {
        "params": {
          "user": "The address of the user whose balance is needed.",
          "vault": "The vault required by specific providers with multi-markets; otherwise, pass address(0)."
        }
      },
      "getDepositRate(address)": {
        "details": "Must return the rate in ray units (1e27).",
        "params": {
          "vault": "The vault required by specific provider with multi-markets; otherwise, pass address(0)."
        }
      },
      "getSource(address,address,address)": {
        "details": "Some provider implementations may not require all keys.",
        "params": {
          "keyOne": "The first key for identification",
          "keyThree": "The third key for identification",
          "keyTwo": "The second key for identification"
        }
      },
      "withdraw(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to withdraw.",
          "vault": "The vault calling this function."
        }
      }
    },
    "title": "AaveV3Provider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,address)": {
        "notice": "Performs a deposit at the provider on behalf of a vault."
      },
      "getDepositBalance(address,address)": {
        "notice": "Returns the deposit balance of a user at the provider."
      },
      "getDepositRate(address)": {
        "notice": "Returns the latest supply annual percentage rate (APR) at the provider."
      },
      "getIdentifier()": {
        "notice": "Returns the identifier of the provider."
      },
      "getSource(address,address,address)": {
        "notice": "Returns the source address that requires ERC20 approval for vault actions."
      },
      "withdraw(uint256,address)": {
        "notice": "Performs a withdraw at the provider on behalf of a vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}