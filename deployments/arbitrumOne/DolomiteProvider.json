{
  "address": "0x3D036B97482CC6c42753dA51917B3302D5d0E9AE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05c3cbc6d02303fe5443fb30d72bc16e646beb33ad0b48346fdc1f486f893003",
  "receipt": {
    "to": null,
    "from": "0xafA9ed53c33bbD8DE300481ce150dB3D35738F9D",
    "contractAddress": "0x3D036B97482CC6c42753dA51917B3302D5d0E9AE",
    "transactionIndex": 3,
    "gasUsed": "502961",
    "logsBloom": "0x
    "blockHash": "0x475d590bf029b62753d63f93aa7a85f395c0dda5b12e06530ef84a71a07f8890",
    "transactionHash": "0x05c3cbc6d02303fe5443fb30d72bc16e646beb33ad0b48346fdc1f486f893003",
    "logs": [],
    "blockNumber": 387733900,
    "cumulativeGasUsed": "719811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d604417f7dcd4229648e9b3c15bb87d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to deposit.\",\"vault\":\"The vault calling this function.\"}},\"getDepositBalance(address,address)\":{\"params\":{\"user\":\"The address of the user whose balance is needed.\",\"vault\":\"The vault required by specific providers with multi-markets; otherwise, pass address(0).\"}},\"getDepositRate(address)\":{\"details\":\"Must return the rate in ray units (1e27).\",\"params\":{\"vault\":\"The vault required by specific provider with multi-markets; otherwise, pass address(0).\"}},\"getSource(address,address,address)\":{\"details\":\"Some provider implementations may not require all keys.\",\"params\":{\"keyOne\":\"The first key for identification\",\"keyThree\":\"The third key for identification\",\"keyTwo\":\"The second key for identification\"}},\"withdraw(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to withdraw.\",\"vault\":\"The vault calling this function.\"}}},\"title\":\"DolomiteProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,address)\":{\"notice\":\"Performs a deposit at the provider on behalf of a vault.\"},\"getDepositBalance(address,address)\":{\"notice\":\"Returns the deposit balance of a user at the provider.\"},\"getDepositRate(address)\":{\"notice\":\"Returns the latest supply annual percentage rate (APR) at the provider.\"},\"getIdentifier()\":{\"notice\":\"Returns the identifier of the provider.\"},\"getSource(address,address,address)\":{\"notice\":\"Returns the source address that requires ERC20 approval for vault actions.\"},\"withdraw(uint256,address)\":{\"notice\":\"Performs a withdraw at the provider on behalf of a vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/providers/DolomiteProvider.sol\":\"DolomiteProvider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4626.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x23460d4a98e568bde8b7ecaa2316853778032106b489c03be29db1abb0e712c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"contracts/interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title IProvider\\n */\\ninterface IProvider {\\n    /**\\n     * @notice Returns the identifier of the provider.\\n     */\\n    function getIdentifier() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the source address that requires ERC20 approval for vault actions.\\n     *\\n     * @param keyOne The first key for identification\\n     * @param keyTwo The second key for identification\\n     * @param keyThree The third key for identification\\n     *\\n     * @dev Some provider implementations may not require all keys.\\n     */\\n    function getSource(\\n        address keyOne,\\n        address keyTwo,\\n        address keyThree\\n    ) external view returns (address source);\\n\\n    /**\\n     * @notice Performs a deposit at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to deposit.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Performs a withdraw at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to withdraw.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Returns the deposit balance of a user at the provider.\\n     *\\n     * @param user The address of the user whose balance is needed.\\n     * @param vault The vault required by specific providers with multi-markets; otherwise, pass address(0).\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Returns the latest supply annual percentage rate (APR) at the provider.\\n     *\\n     * @param vault The vault required by specific provider with multi-markets; otherwise, pass address(0).\\n     *\\n     * @dev Must return the rate in ray units (1e27).\\n     */\\n    function getDepositRate(IVault vault) external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IProvider} from \\\"./IProvider.sol\\\";\\n\\n/**\\n * @title IVault\\n */\\ninterface IVault is IERC4626 {\\n    /**\\n     * @notice Emitted when the vault setup is completed.\\n     *\\n     * @param setupAddress The address that performed the vault setup.\\n     */\\n    event SetupCompleted(address indexed setupAddress);\\n\\n    /**\\n     * @notice Emitted when the timelock contract is changed.\\n     *\\n     * @param timelock The new timelock contract address.\\n     */\\n    event TimelockUpdated(address indexed timelock);\\n\\n    /**\\n     * @notice Emitted when the available providers for the vault change.\\n     *\\n     * @param providers The new array of providers.\\n     */\\n    event ProvidersUpdated(IProvider[] providers);\\n\\n    /**\\n     * @notice Emitted when the active provider is changed.\\n     *\\n     * @param activeProvider The new active provider.\\n     */\\n    event ActiveProviderUpdated(IProvider activeProvider);\\n\\n    /**\\n     * @notice Emitted when the treasury address is changed.\\n     *\\n     * @param treasury The new treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the withdrawal fee percentage is changed.\\n     *\\n     * @param withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    event WithdrawFeePercentUpdated(uint256 withdrawFeePercent);\\n\\n    /**\\n     * @notice Emitted when the minimum amount is changed.\\n     *\\n     * @param minAmount The new minimum amount.\\n     */\\n    event MinAmountUpdated(uint256 minAmount);\\n\\n    /**\\n     * @notice Emitted when a fee is charged.\\n     *\\n     * @param treasury The treasury address of the vault.\\n     * @param assets The total amount from which the fee is charged.\\n     * @param fee The amount charged.\\n     */\\n    event FeeCharged(address indexed treasury, uint256 assets, uint256 fee);\\n\\n    /**\\n     * @notice Emitted when the vault is rebalanced.\\n     *\\n     * @param assetsFrom The amount of assets rebalanced from.\\n     * @param assetsTo The amount of assets rebalanced to.\\n     * @param from The provider from which assets are rebalanced.\\n     * @param to The provider to which assets are rebalanced.\\n     */\\n    event RebalanceExecuted(\\n        uint256 assetsFrom,\\n        uint256 assetsTo,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred.\\n     *\\n     * @param to The address to which rewards are transferred.\\n     * @param amount The amount of rewards transferred.\\n     */\\n    event RewardsTransferred(address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the rewards distributor contract is changed.\\n     *\\n     * @param rewardsDistributor The new rewards distributor contract address.\\n     */\\n    event DistributorUpdated(address indexed rewardsDistributor);\\n\\n    /**\\n     * @notice Sets up the vault with a specified amount of assets to prevent inflation attacks.\\n     * @dev Refer to: https://rokinot.github.io/hatsfinance\\n     *\\n     * @param assets The amount used to set up the vault.\\n     */\\n    function setupVault(uint256 assets) external;\\n\\n    /**\\n     * @notice Performs rebalancing of the vault by moving funds across providers.\\n     * @param assets The amount of assets to be rebalanced.\\n     * @param from The provider currently holding the assets.\\n     * @param to The provider receiving the assets.\\n     * @param fee The fee amount charged for the rebalancing.\\n     * @param activateToProvider A flag indicating whether to mark the receiving provider as active.\\n     */\\n    function rebalance(\\n        uint256 assets,\\n        IProvider from,\\n        IProvider to,\\n        uint256 fee,\\n        bool activateToProvider\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4\",\"license\":\"MIT\"},\"contracts/interfaces/dolomite/IDepositWithdrawalProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IDepositWithdrawalProxy\\n * @dev Modified version of the original Dolomite interface.\\n */\\ninterface IDepositWithdrawalProxy {\\n    /// Checks that either BOTH, FROM, or TO accounts all have non-negative balances\\n    enum BalanceCheckFlag {\\n        Both,\\n        From,\\n        To,\\n        None\\n    }\\n\\n    /**\\n     * @param _toAccountIndex   The index into which `msg.sender` will be depositing\\n     * @param _marketId         The ID of the market being deposited\\n     * @param _amountWei        The amount, in Wei, to deposit. Use `uint(-1)` to deposit `msg.sender`'s entire balance\\n     */\\n    function depositWei(\\n        uint256 _toAccountIndex,\\n        uint256 _marketId,\\n        uint256 _amountWei\\n    ) external;\\n\\n    /**\\n     * Same as `depositWei` but converts the `msg.sender`'s sent ETH into WETH before depositing into `DolomiteMargin`.\\n     *\\n     * @param _toAccountIndex The index into which `msg.sender` will be depositing\\n     */\\n    function depositETH(uint256 _toAccountIndex) external payable;\\n\\n    /**\\n     * @dev Same as `depositWei` but defaults to account index 0 to save additional call data\\n     *\\n     * @param _marketId     The ID of the market being deposited\\n     * @param _amountWei    The amount, in Wei, to deposit. Use `uint(-1)` to deposit `msg.sender`'s entire balance\\n     */\\n    function depositWeiIntoDefaultAccount(\\n        uint256 _marketId,\\n        uint256 _amountWei\\n    ) external;\\n\\n    /**\\n     * Same as `depositWeiIntoDefaultAccount` but converts the `msg.sender`'s sent ETH into WETH before depositing into\\n     * `DolomiteMargin`.\\n     */\\n    function depositETHIntoDefaultAccount() external payable;\\n\\n    /**\\n     * @param _fromAccountIndex The index from which `msg.sender` will be withdrawing\\n     * @param _marketId         The ID of the market being withdrawn\\n     * @param _amountWei        The amount, in Wei, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire\\n     *                          balance\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawWei(\\n        uint256 _fromAccountIndex,\\n        uint256 _marketId,\\n        uint256 _amountWei,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n\\n    /**\\n     * Same as `withdrawWei` but for withdrawing ETH. The user will receive unwrapped ETH from DolomiteMargin.\\n     *\\n     * @param _fromAccountIndex     The index from which `msg.sender` will be withdrawing\\n     * @param _amountWei        The amount, in Wei, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire\\n     *                          balance.\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawETH(\\n        uint256 _fromAccountIndex,\\n        uint256 _amountWei,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n\\n    /**\\n     * @dev Same as `withdrawWei` but defaults to account index 0 to save additional call data\\n     *\\n     * @param _marketId         The ID of the market being withdrawn\\n     * @param _amountWei        The amount, in Wei, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire\\n     *                          balance\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawWeiFromDefaultAccount(\\n        uint256 _marketId,\\n        uint256 _amountWei,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n\\n    /**\\n     * Same as `withdrawWeiFromDefaultAccount` but for withdrawing ETH. The user will receive unwrapped ETH from\\n     * DolomiteMargin.\\n     *\\n     * @param _amountWei        The amount, in Wei, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire\\n     *                          balance\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawETHFromDefaultAccount(\\n        uint256 _amountWei,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n\\n    /**\\n     * @param _toAccountIndex   The index into which `msg.sender` will be depositing\\n     * @param _marketId         The ID of the market being deposited\\n     * @param _amountPar        The amount, in Par, to deposit.\\n     */\\n    function depositPar(\\n        uint256 _toAccountIndex,\\n        uint256 _marketId,\\n        uint256 _amountPar\\n    ) external;\\n\\n    /**\\n     * @dev Same as `depositPar` but defaults to account index 0 to save additional call data\\n     *\\n     * @param _marketId     The ID of the market being deposited\\n     * @param _amountPar    The amount, in Par, to deposit.\\n     */\\n    function depositParIntoDefaultAccount(\\n        uint256 _marketId,\\n        uint256 _amountPar\\n    ) external;\\n\\n    /**\\n     * @param _fromAccountIndex     The index from which `msg.sender` will be withdrawing\\n     * @param _marketId         The ID of the market being withdrawn\\n     * @param _amountPar        The amount, in Par, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire\\n     *                          balance\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawPar(\\n        uint256 _fromAccountIndex,\\n        uint256 _marketId,\\n        uint256 _amountPar,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n\\n    /**\\n     * @dev Same as `withdrawPar` but defaults to account index 0 to save additional call data\\n     *\\n     * @param _marketId         The ID of the market being withdrawn\\n     * @param _amountPar        The amount, in Par, to withdraw. Use `uint(-1)` to withdraw `msg.sender`'s entire balance\\n     * @param _balanceCheckFlag Use `BalanceCheckFlag.Both` or `BalanceCheckFlag.From` to check that `_fromAccountIndex`\\n     *                          balance is non-negative after the withdrawal settles.\\n     */\\n    function withdrawParFromDefaultAccount(\\n        uint256 _marketId,\\n        uint256 _amountPar,\\n        BalanceCheckFlag _balanceCheckFlag\\n    ) external;\\n}\\n\",\"keccak256\":\"0x79fc1538a313c9f50965913f3e583313e29e129f8351f3b5d6362dc8e08c8540\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/dolomite/IDolomiteGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.23;\\n\\nimport {IDolomiteMargin} from \\\"./IDolomiteMargin.sol\\\";\\n\\n/**\\n * @title IDolomiteGetter\\n * @dev Modified version of the original Dolomite interface.\\n */\\ninterface IDolomiteGetter {\\n    function getMarketSupplyInterestRateApr(\\n        address _token\\n    ) external view returns (IDolomiteMargin.InterestRate memory);\\n}\\n\",\"keccak256\":\"0x88368539481f5ce955c440ca239e2771bcdecbe4d276bdb8311543bf1bf4717e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/dolomite/IDolomiteMargin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IDolomiteMargin\\n * @dev Modified version of the original Dolomite interface.\\n */\\ninterface IDolomiteMargin {\\n    struct D256 {\\n        uint256 value;\\n    }\\n    // Total borrow and supply values for a market\\n    struct TotalPar {\\n        uint128 borrow;\\n        uint128 supply;\\n    }\\n\\n    // Individual principal amount for an account\\n    struct Par {\\n        bool sign; // true if positive\\n        uint128 value;\\n    }\\n\\n    struct TotalWei {\\n        uint128 borrow;\\n        uint128 supply;\\n    }\\n\\n    // Individual token amount for an account\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n\\n    // Represents the unique key that specifies an account\\n    struct AccountInfo {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n\\n    /*\\n     * Total value of an some amount of an asset. Equal to (price * amount). Has 36 decimals.\\n     */\\n    struct MonetaryValue {\\n        uint256 value;\\n    }\\n\\n    struct InterestRate {\\n        uint256 value;\\n    }\\n\\n    struct InterestIndex {\\n        uint112 borrow;\\n        uint112 supply;\\n        uint32 lastUpdate;\\n    }\\n\\n    // ============ Getters for Risk Params ============\\n\\n    /**\\n     * Get the maximum number of assets an account owner can hold in an account number.\\n     *\\n     * @return  The maximum number of assets an account owner can hold in an account number.\\n     */\\n    function getAccountMaxNumberOfMarketsWithBalances()\\n        external\\n        view\\n        returns (uint256);\\n\\n    // ============ Getters for Markets ============\\n\\n    /**\\n     * Get the total number of markets.\\n     *\\n     * @return  The number of markets\\n     */\\n    function getNumMarkets() external view returns (uint256);\\n\\n    /**\\n     * Get the ERC20 token address for a market.\\n     *\\n     * @param  token    The token to query\\n     * @return          The token's marketId if the token is valid\\n     */\\n    function getMarketIdByTokenAddress(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Get the ERC20 token address for a market.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The token address\\n     */\\n    function getMarketTokenAddress(\\n        uint256 marketId\\n    ) external view returns (address);\\n\\n    /**\\n     * Return true if a particular market is in closing mode. Additional borrows cannot be taken\\n     * from a market that is closing.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           True if the market is closing\\n     */\\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\\n\\n    /**\\n     * Get the total principal amounts (borrowed and supplied) for a market.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The total principal amounts\\n     */\\n    function getMarketTotalPar(\\n        uint256 marketId\\n    ) external view returns (TotalPar memory);\\n\\n    /**\\n     * Get the most recently cached interest index for a market.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The most recent index\\n     */\\n    function getMarketCachedIndex(\\n        uint256 marketId\\n    ) external view returns (InterestIndex memory);\\n\\n    /**\\n     * Get the interest index for a market if it were to be updated right now.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The estimated current index\\n     */\\n    function getMarketCurrentIndex(\\n        uint256 marketId\\n    ) external view returns (InterestIndex memory);\\n\\n    /**\\n     * Same as getMarketMaxSupplyWei. Added for backwards-compatibility.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The max amount of the market that can be supplied. Always 0 or positive.\\n     */\\n    function getMarketMaxWei(\\n        uint256 marketId\\n    ) external view returns (Wei memory);\\n\\n    /**\\n     * Same as getMarketBorrowInterestRatePerSecond. Added for backwards-compatibility.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The current borrow interest rate\\n     */\\n    function getMarketInterestRate(\\n        uint256 marketId\\n    ) external view returns (InterestRate memory);\\n\\n    /**\\n     * Get the global earnings-rate variable that determines what percentage of the interest paid\\n     * by borrowers gets passed-on to suppliers.\\n     *\\n     * @return  The global earnings rate\\n     */\\n    function getEarningsRate() external view returns (D256 memory);\\n\\n    /**\\n     * Get the number of tokens that are owed to the `owner` of DolomiteMargin. The number of excess tokens is\\n     * calculated by taking the current number of tokens held in DolomiteMargin, adding the number of tokens owed to\\n     * DolomiteMargin by borrowers, and subtracting the number of tokens owed to suppliers by DolomiteMargin.\\n     *\\n     * @param  marketId  The market to query\\n     * @return           The number of excess tokens\\n     */\\n    function getNumExcessTokens(\\n        uint256 marketId\\n    ) external view returns (Wei memory);\\n\\n    // ============ Getters for Accounts ============\\n\\n    /**\\n     * Get the principal value for a particular account and market.\\n     *\\n     * @param  account   The account to query\\n     * @param  marketId  The market to query\\n     * @return           The principal value\\n     */\\n    function getAccountPar(\\n        AccountInfo calldata account,\\n        uint256 marketId\\n    ) external view returns (Par memory);\\n\\n    /**\\n     * Get the token balance for a particular account and market.\\n     *\\n     * @param  account   The account to query\\n     * @param  marketId  The market to query\\n     * @return           The token amount\\n     */\\n    function getAccountWei(\\n        AccountInfo calldata account,\\n        uint256 marketId\\n    ) external view returns (Wei memory);\\n\\n    /**\\n     * Get a list of markets that have a non-zero balance for an account\\n     *\\n     * @param  account  The account to query\\n     * @return          The non-sorted marketIds with non-zero balance for the account.\\n     */\\n    function getAccountMarketsWithBalances(\\n        AccountInfo calldata account\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * Get the number of markets that have a non-zero balance for an account\\n     *\\n     * @param  account  The account to query\\n     * @return          The number of markets with a non-zero balance for the account.\\n     */\\n    function getAccountNumberOfMarketsWithBalances(\\n        AccountInfo calldata account\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Get the marketId for an account's market with a non-zero balance at the given index\\n     *\\n     * @param  account  The account to query\\n     * @return          The market ID in the provided index for the account.\\n     */\\n    function getAccountMarketWithBalanceAtIndex(\\n        AccountInfo calldata account,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Get the number of markets with which an account has a negative balance.\\n     *\\n     * @param  account  The account to query\\n     * @return          The number of markets with a negative balance for this account.\\n     */\\n    function getAccountNumberOfMarketsWithDebt(\\n        AccountInfo calldata account\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Get the total supplied and total borrowed value of an account.\\n     *\\n     * @param  account  The account to query\\n     * @return          The following values:\\n     *                   - The supplied value of the account\\n     *                   - The borrowed value of the account\\n     */\\n    function getAccountValues(\\n        AccountInfo calldata account\\n    ) external view returns (MonetaryValue memory, MonetaryValue memory);\\n\\n    /**\\n     * Get the total supplied and total borrowed values of an account adjusted by the marginPremium\\n     * of each market. Supplied values are divided by (1 + marginPremium) for each market and\\n     * borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\\n     * adjusted values gives the margin-ratio of the account which will be compared to the global\\n     * margin-ratio when determining if the account can be liquidated.\\n     *\\n     * @param  account  The account to query\\n     * @return          The following values:\\n     *                   - The supplied value of the account (adjusted for marginPremium)\\n     *                   - The borrowed value of the account (adjusted for marginPremium)\\n     */\\n    function getAdjustedAccountValues(\\n        AccountInfo calldata account\\n    ) external view returns (MonetaryValue memory, MonetaryValue memory);\\n\\n    /**\\n     * Get an account's summary for each market.\\n     *\\n     * @param  account  The account to query\\n     * @return          The following values:\\n     *                   - The market IDs for each market\\n     *                   - The ERC20 token address for each market\\n     *                   - The account's principal value for each market\\n     *                   - The account's (supplied or borrowed) number of tokens for each market\\n     */\\n    function getAccountBalances(\\n        AccountInfo calldata account\\n    )\\n        external\\n        view\\n        returns (uint[] memory, address[] memory, Par[] memory, Wei[] memory);\\n\\n    // ============ Getters for Account Permissions ============\\n\\n    /**\\n     * Return true if a particular address is approved as an operator for an owner's accounts.\\n     * Approved operators can act on the accounts of the owner as if it were the operator's own.\\n     *\\n     * @param  owner     The owner of the accounts\\n     * @param  operator  The possible operator\\n     * @return           True if operator is approved for owner's accounts\\n     */\\n    function getIsLocalOperator(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * Return true if a particular address is approved as a global operator. Such an address can\\n     * act on any account as if it were the operator's own.\\n     *\\n     * @param  operator  The address to query\\n     * @return           True if operator is a global operator\\n     */\\n    function getIsGlobalOperator(address operator) external view returns (bool);\\n\\n    /**\\n     * Checks if the autoTrader can only be called invoked by a global operator\\n     *\\n     * @param autoTrader    The trader that should be checked for special call privileges.\\n     */\\n    function getIsAutoTraderSpecial(\\n        address autoTrader\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ed4e5cfcdaa18c274423864696c66f7742ad9b45d077f72a6560188cdc08812\",\"license\":\"Apache-2.0\"},\"contracts/providers/DolomiteProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IProvider} from \\\"../interfaces/IProvider.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IDepositWithdrawalProxy} from \\\"../interfaces/dolomite/IDepositWithdrawalProxy.sol\\\";\\nimport {IDolomiteMargin} from \\\"../interfaces/dolomite/IDolomiteMargin.sol\\\";\\nimport {IDolomiteGetter} from \\\"../interfaces/dolomite/IDolomiteGetter.sol\\\";\\n\\n/**\\n * @title DolomiteProvider\\n */\\ncontract DolomiteProvider is IProvider {\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external override returns (bool success) {\\n        IDepositWithdrawalProxy dolomite = _getDolomiteProxy();\\n        uint256 marketId = _getMarketId(vault.asset());\\n        dolomite.depositWeiIntoDefaultAccount(marketId, amount);\\n        success = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external override returns (bool success) {\\n        IDepositWithdrawalProxy dolomite = _getDolomiteProxy();\\n        uint256 marketId = _getMarketId(vault.asset());\\n        dolomite.withdrawWeiFromDefaultAccount(\\n            marketId,\\n            amount,\\n            IDepositWithdrawalProxy.BalanceCheckFlag.From\\n        );\\n        success = true;\\n    }\\n\\n    /**\\n     * @dev Returns the market id for the specified asset.\\n     */\\n    function _getMarketId(\\n        address asset\\n    ) internal view returns (uint256 marketId) {\\n        IDolomiteMargin margin = _getDolomiteMargin();\\n        marketId = margin.getMarketIdByTokenAddress(asset);\\n    }\\n\\n    /**\\n     * @dev Returns the DolomiteMargin contract of Dolomite.\\n     */\\n    function _getDolomiteMargin() internal pure returns (IDolomiteMargin) {\\n        return IDolomiteMargin(0x6Bd780E7fDf01D77e4d475c821f1e7AE05409072);\\n    }\\n\\n    /**\\n     * @dev Returns the SafeGettersForDolomiteMargin contract of Dolomite.\\n     */\\n    function _getDolomiteGetter() internal pure returns (IDolomiteGetter) {\\n        return IDolomiteGetter(0x9381942De7A66fdB4741272EaB4fc0A362F7a16a);\\n    }\\n\\n    /**\\n     * @dev Returns the DepositWithdrawalProxy contract of Dolomite.\\n     */\\n    function _getDolomiteProxy()\\n        internal\\n        pure\\n        returns (IDepositWithdrawalProxy)\\n    {\\n        return\\n            IDepositWithdrawalProxy(0xAdB9D68c613df4AA363B42161E1282117C7B9594);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view override returns (uint256 balance) {\\n        IDolomiteMargin margin = _getDolomiteMargin();\\n        uint256 marketId = _getMarketId(vault.asset());\\n\\n        IDolomiteMargin.AccountInfo memory accountInfo = IDolomiteMargin\\n            .AccountInfo({owner: user, number: 0});\\n\\n        IDolomiteMargin.Wei memory accountWei = margin.getAccountWei(\\n            accountInfo,\\n            marketId\\n        );\\n        balance = accountWei.value;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositRate(\\n        IVault vault\\n    ) external view override returns (uint256 rate) {\\n        IDolomiteGetter getter = _getDolomiteGetter();\\n        IDolomiteMargin.InterestRate memory interestRate = getter\\n            .getMarketSupplyInterestRateApr(vault.asset());\\n        // Scaled by 1e9 to return ray(1e27) per IProvider specs, Dolomite uses base 1e18 number.\\n        rate = interestRate.value * 10 ** 9;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getSource(\\n        address,\\n        address,\\n        address\\n    ) external pure override returns (address source) {\\n        source = address(_getDolomiteMargin());\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getIdentifier() public pure override returns (string memory) {\\n        return \\\"Dolomite_Provider\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x1ed6690bc632347797e3e6a61fb50cea4bad8ef7348ffab79ed25521a23a549c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610819806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062f714ce146100665780630ae112a41461008e5780634c8f411d146100af5780636e553f65146100c257806373f64d44146100d5578063aa23e03d146100f5575b600080fd5b610079610074366004610566565b610128565b60405190151581526020015b60405180910390f35b6100a161009c366004610596565b610212565b604051908152602001610085565b6100a16100bd3660046105c4565b610306565b6100796100d0366004610566565b61040b565b6100e86100e33660046105e1565b610492565b604051610085919061062c565b60408051808201825260118152702237b637b6b4ba32afa83937bb34b232b960791b602082015290516100859190610640565b60008061013361049c565b905060006101a1846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c919061068f565b6104b4565b60405163403e5c3560e11b81529091506001600160a01b0383169063807cb86a906101d590849089906001906004016106ac565b600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b50600198975050505050505050565b60008061021d610536565b90506000610262846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b6040805180820182526001600160a01b038881168252600060208301818152935163306430bb60e21b815283518316600482015293516024850152604484018590529394509092919085169063c190c2ec906064016040805180830381865afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f791906106e6565b60200151979650505050505050565b600080739381942de7a66fdb4741272eab4fc0a362f7a16a90506000816001600160a01b0316636b0d6e25856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610393919061068f565b6040518263ffffffff1660e01b81526004016103af919061062c565b602060405180830381865afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610750565b805190915061040390633b9aca0061079f565b949350505050565b60008061041661049c565b9050600061045b846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b60405163bc6efe3160e01b815260048101829052602481018790529091506001600160a01b0383169063bc6efe31906044016101d5565b6000610403610536565b73adb9d68c613df4aa363b42161e1282117c7b959490565b6000806104bf610536565b604051638fae3be160e01b81529091506001600160a01b03821690638fae3be1906104ee90869060040161062c565b602060405180830381865afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f91906107ca565b9392505050565b736bd780e7fdf01d77e4d475c821f1e7ae0540907290565b6001600160a01b038116811461056357600080fd5b50565b6000806040838503121561057957600080fd5b82359150602083013561058b8161054e565b809150509250929050565b600080604083850312156105a957600080fd5b82356105b48161054e565b9150602083013561058b8161054e565b6000602082840312156105d657600080fd5b813561052f8161054e565b6000806000606084860312156105f657600080fd5b83356106018161054e565b925060208401356106118161054e565b915060408401356106218161054e565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020808352835180602085015260005b8181101561066e57858101830151858201604001528201610652565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156106a157600080fd5b815161052f8161054e565b8381526020810183905260608101600483106106d857634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b6000604082840312156106f857600080fd5b604080519081016001600160401b038111828210171561072857634e487b7160e01b600052604160045260246000fd5b6040528251801515811461073b57600080fd5b81526020928301519281019290925250919050565b60006020828403121561076257600080fd5b604051602081016001600160401b038111828210171561079257634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80820281158282048414176107c457634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156107dc57600080fd5b505191905056fea2646970667358221220ca71fb786b893d648e8e13caa87913db30fa8efd00b830b131d17494f0c2cd5064736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100615760003560e01c8062f714ce146100665780630ae112a41461008e5780634c8f411d146100af5780636e553f65146100c257806373f64d44146100d5578063aa23e03d146100f5575b600080fd5b610079610074366004610566565b610128565b60405190151581526020015b60405180910390f35b6100a161009c366004610596565b610212565b604051908152602001610085565b6100a16100bd3660046105c4565b610306565b6100796100d0366004610566565b61040b565b6100e86100e33660046105e1565b610492565b604051610085919061062c565b60408051808201825260118152702237b637b6b4ba32afa83937bb34b232b960791b602082015290516100859190610640565b60008061013361049c565b905060006101a1846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c919061068f565b6104b4565b60405163403e5c3560e11b81529091506001600160a01b0383169063807cb86a906101d590849089906001906004016106ac565b600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b50600198975050505050505050565b60008061021d610536565b90506000610262846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b6040805180820182526001600160a01b038881168252600060208301818152935163306430bb60e21b815283518316600482015293516024850152604484018590529394509092919085169063c190c2ec906064016040805180830381865afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f791906106e6565b60200151979650505050505050565b600080739381942de7a66fdb4741272eab4fc0a362f7a16a90506000816001600160a01b0316636b0d6e25856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610393919061068f565b6040518263ffffffff1660e01b81526004016103af919061062c565b602060405180830381865afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610750565b805190915061040390633b9aca0061079f565b949350505050565b60008061041661049c565b9050600061045b846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610178573d6000803e3d6000fd5b60405163bc6efe3160e01b815260048101829052602481018790529091506001600160a01b0383169063bc6efe31906044016101d5565b6000610403610536565b73adb9d68c613df4aa363b42161e1282117c7b959490565b6000806104bf610536565b604051638fae3be160e01b81529091506001600160a01b03821690638fae3be1906104ee90869060040161062c565b602060405180830381865afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f91906107ca565b9392505050565b736bd780e7fdf01d77e4d475c821f1e7ae0540907290565b6001600160a01b038116811461056357600080fd5b50565b6000806040838503121561057957600080fd5b82359150602083013561058b8161054e565b809150509250929050565b600080604083850312156105a957600080fd5b82356105b48161054e565b9150602083013561058b8161054e565b6000602082840312156105d657600080fd5b813561052f8161054e565b6000806000606084860312156105f657600080fd5b83356106018161054e565b925060208401356106118161054e565b915060408401356106218161054e565b809150509250925092565b6001600160a01b0391909116815260200190565b60006020808352835180602085015260005b8181101561066e57858101830151858201604001528201610652565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156106a157600080fd5b815161052f8161054e565b8381526020810183905260608101600483106106d857634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b6000604082840312156106f857600080fd5b604080519081016001600160401b038111828210171561072857634e487b7160e01b600052604160045260246000fd5b6040528251801515811461073b57600080fd5b81526020928301519281019290925250919050565b60006020828403121561076257600080fd5b604051602081016001600160401b038111828210171561079257634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80820281158282048414176107c457634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156107dc57600080fd5b505191905056fea2646970667358221220ca71fb786b893d648e8e13caa87913db30fa8efd00b830b131d17494f0c2cd5064736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to deposit.",
          "vault": "The vault calling this function."
        }
      },
      "getDepositBalance(address,address)": {
        "params": {
          "user": "The address of the user whose balance is needed.",
          "vault": "The vault required by specific providers with multi-markets; otherwise, pass address(0)."
        }
      },
      "getDepositRate(address)": {
        "details": "Must return the rate in ray units (1e27).",
        "params": {
          "vault": "The vault required by specific provider with multi-markets; otherwise, pass address(0)."
        }
      },
      "getSource(address,address,address)": {
        "details": "Some provider implementations may not require all keys.",
        "params": {
          "keyOne": "The first key for identification",
          "keyThree": "The third key for identification",
          "keyTwo": "The second key for identification"
        }
      },
      "withdraw(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to withdraw.",
          "vault": "The vault calling this function."
        }
      }
    },
    "title": "DolomiteProvider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,address)": {
        "notice": "Performs a deposit at the provider on behalf of a vault."
      },
      "getDepositBalance(address,address)": {
        "notice": "Returns the deposit balance of a user at the provider."
      },
      "getDepositRate(address)": {
        "notice": "Returns the latest supply annual percentage rate (APR) at the provider."
      },
      "getIdentifier()": {
        "notice": "Returns the identifier of the provider."
      },
      "getSource(address,address,address)": {
        "notice": "Returns the source address that requires ERC20 approval for vault actions."
      },
      "withdraw(uint256,address)": {
        "notice": "Performs a withdraw at the provider on behalf of a vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}