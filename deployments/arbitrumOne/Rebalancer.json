{
  "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IProvider[]",
          "name": "providers_",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "withdrawFeePercent_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessManager__CallerIsNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessManager__CallerIsNotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessManager__CallerIsNotOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessManager__CallerIsNotRootUpdater",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ERC2612ExpiredSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC2612InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "name": "InvalidAccountNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausableActions__ActionNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausableActions__ActionPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Rebalancer__ExcessRebalanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Rebalancer__InvalidProvider",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault__AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault__DepositLessThanMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault__InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault__SetupAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault__Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProvider",
          "name": "activeProvider",
          "type": "address"
        }
      ],
      "name": "ActiveProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardsDistributor",
          "type": "address"
        }
      ],
      "name": "DistributorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "MinAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PausableActions.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProvider[]",
          "name": "providers",
          "type": "address[]"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsTo",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RebalanceExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "setupAddress",
          "type": "address"
        }
      ],
      "name": "SetupCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "timelock",
          "type": "address"
        }
      ],
      "name": "TimelockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PausableActions.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFeePercent",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeePercentUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_UPDATER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeProvider",
      "outputs": [
        {
          "internalType": "contract IProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getBalanceOfAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProviders",
      "outputs": [
        {
          "internalType": "contract IProvider[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PausableActions.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PausableActions.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "contract IProvider",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IProvider",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "activateToProvider",
          "type": "bool"
        }
      ],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProvider",
          "name": "_activeProvider",
          "type": "address"
        }
      ],
      "name": "setActiveProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProvider[]",
          "name": "providers",
          "type": "address[]"
        }
      ],
      "name": "setProviders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupCompleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "setupVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PausableActions.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
  "receipt": {
    "to": null,
    "from": "0xafA9ed53c33bbD8DE300481ce150dB3D35738F9D",
    "contractAddress": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
    "transactionIndex": 29,
    "gasUsed": "3494772",
    "logsBloom": "0x
    "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff",
    "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000afa9ed53c33bbd8de300481ce150db3d35738f9d",
          "0x000000000000000000000000afa9ed53c33bbd8de300481ce150db3d35738f9d"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0xc046b9e8f0cd9b70a3b838962e9c229277fbb7abee68ea0fad4acf2898ed2ca9",
          "0x0000000000000000000000000c5ced804488e4abde6b809164e72cc0f91896b5"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000078c11f63e6840820be18fda461ab16f23da5884f",
          "0x0000000000000000000000006f7d514bbd4aff3bcd1140b7344b32f063dee486"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 109,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000078c11f63e6840820be18fda461ab16f23da5884f",
          "0x000000000000000000000000794a61358d6845594f94dc1db02a252b5b4814ad"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 110,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x5f589bfb97387c6d7ce41557510dba9ca4a577876489cacc87a22a395b8b13ca"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004382190fdbf4befa016ea412f34eb54593312ad5000000000000000000000000e1cfb1bdb3901dcee9f21146c1f299c775d9b65c",
        "logIndex": 111,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x34ea2e3abaf449e8227dcf35ffa3aa94f2b89384cdf95fe6fd34dc2aefc59b09"
        ],
        "data": "0x0000000000000000000000004382190fdbf4befa016ea412f34eb54593312ad5",
        "logIndex": 112,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d1",
          "0x000000000000000000000000c8a682f0991323777253ffa5fa6f19035685e723"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0xd84a6d804e5eabc5849fa0d39e4545509125b95c297e1ec5ed98fad0f66befb8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000038d7ea4c68000",
        "logIndex": 114,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x7a94dccf633222d5f6174016b33ae91ce3449a59c8ac979df57cc84ea1a5b2ef"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000f4240",
        "logIndex": 115,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 367713351,
        "transactionHash": "0xc4ec9585ff05fe6d4c55d03e7fd16291fa371617493fe1879cdcec5e19daf3d8",
        "address": "0x78c11f63E6840820be18fDA461Ab16f23da5884f",
        "topics": [
          "0x534f879afd40abb4e39f8e1b77a316be4c8e3521d9cf5a3a3db8959d574d4559"
        ],
        "data": "0x000000000000000000000000afa9ed53c33bbd8de300481ce150db3d35738f9d0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 116,
        "blockHash": "0xcf1f8b014ef07f6fa423f1b17597727f4bf27c6682cfe492678d36865fc4f5ff"
      }
    ],
    "blockNumber": 367713351,
    "cumulativeGasUsed": "7323904",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "Rebalance WETH",
    "rWETH",
    [
      "0x4382190FDbf4befA016Ea412f34eb54593312aD5",
      "0xE1Cfb1BDb3901dcEe9F21146c1F299c775d9B65C"
    ],
    "1000000000000000",
    "0x0c5cEd804488E4AbdE6B809164e72cc0F91896b5",
    "0xc8a682F0991323777253ffa5fa6F19035685E723"
  ],
  "numDeployments": 1,
  "solcInputHash": "08e9f5ef185e61f929e85712217423f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IProvider[]\",\"name\":\"providers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeePercent_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessManager__CallerIsNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManager__CallerIsNotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManager__CallerIsNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManager__CallerIsNotRootUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableActions__ActionNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableActions__ActionPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Rebalancer__ExcessRebalanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Rebalancer__InvalidProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__DepositLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__SetupAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProvider\",\"name\":\"activeProvider\",\"type\":\"address\"}],\"name\":\"ActiveProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"}],\"name\":\"DistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"MinAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PausableActions.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProvider[]\",\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsTo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RebalanceExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setupAddress\",\"type\":\"address\"}],\"name\":\"SetupCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"}],\"name\":\"TimelockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PausableActions.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFeePercent\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeePercentUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeProvider\",\"outputs\":[{\"internalType\":\"contract IProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBalanceOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviders\",\"outputs\":[{\"internalType\":\"contract IProvider[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PausableActions.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PausableActions.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"contract IProvider\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IProvider\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activateToProvider\",\"type\":\"bool\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProvider\",\"name\":\"_activeProvider\",\"type\":\"address\"}],\"name\":\"setActiveProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProvider[]\",\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"setProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePercent\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"setupVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PausableActions.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessManager__CallerIsNotAdmin()\":[{\"details\":\"Errors\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"PausableActions__ActionPaused()\":[{\"details\":\"Errors\"}],\"Rebalancer__InvalidProvider()\":[{\"details\":\"Errors\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"Vault__Unauthorized()\":[{\"details\":\"Errors\"}]},\"events\":{\"ActiveProviderUpdated(address)\":{\"params\":{\"activeProvider\":\"The new active provider.\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DistributorUpdated(address)\":{\"params\":{\"rewardsDistributor\":\"The new rewards distributor contract address.\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"FeeCharged(address,uint256,uint256)\":{\"params\":{\"assets\":\"The total amount from which the fee is charged.\",\"fee\":\"The amount charged.\",\"treasury\":\"The treasury address of the vault.\"}},\"MinAmountUpdated(uint256)\":{\"params\":{\"minAmount\":\"The new minimum amount.\"}},\"Paused(address,uint8)\":{\"details\":\"Emitted when the pause is triggered by `account` for a specific `action`.\"},\"ProvidersUpdated(address[])\":{\"params\":{\"providers\":\"The new array of providers.\"}},\"RebalanceExecuted(uint256,uint256,address,address)\":{\"params\":{\"assetsFrom\":\"The amount of assets rebalanced from.\",\"assetsTo\":\"The amount of assets rebalanced to.\",\"from\":\"The provider from which assets are rebalanced.\",\"to\":\"The provider to which assets are rebalanced.\"}},\"RewardsTransferred(address,uint256)\":{\"params\":{\"amount\":\"The amount of rewards transferred.\",\"to\":\"The address to which rewards are transferred.\"}},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`.\"},\"SetupCompleted(address)\":{\"params\":{\"setupAddress\":\"The address that performed the vault setup.\"}},\"TimelockUpdated(address)\":{\"params\":{\"timelock\":\"The new timelock contract address.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"TreasuryUpdated(address)\":{\"params\":{\"treasury\":\"The new treasury address.\"}},\"Unpaused(address,uint8)\":{\"details\":\"Emitted when the pause is lifted by `account` for a specific `action`.\"},\"WithdrawFeePercentUpdated(uint256)\":{\"params\":{\"withdrawFeePercent\":\"The new withdrawal fee percentage.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the Rebalancer contract with the specified parameters.\",\"params\":{\"asset_\":\"The address of the underlying asset managed by the vault.\",\"name_\":\"The name of the tokenized vault.\",\"providers_\":\"An array of providers serving as a liquidity source for lending and/or yield.\",\"symbol_\":\"The symbol of the tokenized vault.\",\"timelock_\":\"The address of the timelock contract.\",\"treasury_\":\"The address of the treasury.\",\"withdrawFeePercent_\":\"The fee percentage applied to withdrawals.\"}},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getBalanceOfAsset(address)\":{\"params\":{\"owner\":\"The address of the account whose asset balance is checked.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have the admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"pause(uint8)\":{\"params\":{\"action\":\"The action to pause.\"}},\"paused(uint8)\":{\"details\":\"Returns true if the specified `action` is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"rebalance(uint256,address,address,uint256,bool)\":{\"params\":{\"activateToProvider\":\"A flag indicating whether to mark the receiving provider as active.\",\"assets\":\"The amount of assets to be rebalanced.\",\"fee\":\"The fee amount charged for the rebalancing.\",\"from\":\"The provider currently holding the assets.\",\"to\":\"The provider receiving the assets.\"}},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have the admin role. May emit a {RoleRevoked} event.\"},\"setActiveProvider(address)\":{\"params\":{\"_activeProvider\":\"The contract of the new active provider.\"}},\"setMinAmount(uint256)\":{\"params\":{\"_minAmount\":\"The new minimum amount.\"}},\"setProviders(address[])\":{\"params\":{\"providers\":\"An array of provider contracts.\"}},\"setTimelock(address)\":{\"params\":{\"_timelock\":\"The address of the new timelock contract.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"The new treasury address.\"}},\"setWithdrawFeePercent(uint256)\":{\"params\":{\"_withdrawFeePercent\":\"The new withdrawal fee percentage.\"}},\"setupVault(uint256)\":{\"details\":\"Refer to: https://rokinot.github.io/hatsfinance\",\"params\":{\"assets\":\"The amount used to set up the vault.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"unpause(uint8)\":{\"params\":{\"action\":\"The action to unpause.\"}},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"title\":\"Rebalancer\",\"version\":1},\"userdoc\":{\"events\":{\"ActiveProviderUpdated(address)\":{\"notice\":\"Emitted when the active provider is changed.\"},\"DistributorUpdated(address)\":{\"notice\":\"Emitted when the rewards distributor contract is changed.\"},\"FeeCharged(address,uint256,uint256)\":{\"notice\":\"Emitted when a fee is charged.\"},\"MinAmountUpdated(uint256)\":{\"notice\":\"Emitted when the minimum amount is changed.\"},\"ProvidersUpdated(address[])\":{\"notice\":\"Emitted when the available providers for the vault change.\"},\"RebalanceExecuted(uint256,uint256,address,address)\":{\"notice\":\"Emitted when the vault is rebalanced.\"},\"RewardsTransferred(address,uint256)\":{\"notice\":\"Emitted when rewards are transferred.\"},\"SetupCompleted(address)\":{\"notice\":\"Emitted when the vault setup is completed.\"},\"TimelockUpdated(address)\":{\"notice\":\"Emitted when the timelock contract is changed.\"},\"TreasuryUpdated(address)\":{\"notice\":\"Emitted when the treasury address is changed.\"},\"WithdrawFeePercentUpdated(uint256)\":{\"notice\":\"Emitted when the withdrawal fee percentage is changed.\"}},\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Returns the number of decimals used to get number representation.\"},\"getBalanceOfAsset(address)\":{\"notice\":\"Returns the amount of assets owned by the specified address.\"},\"getProviders()\":{\"notice\":\"Returns the array of providers of this vault.\"},\"pause(uint8)\":{\"notice\":\"Pauses the specified action in the vault.\"},\"rebalance(uint256,address,address,uint256,bool)\":{\"notice\":\"Performs rebalancing of the vault by moving funds across providers.\"},\"setActiveProvider(address)\":{\"notice\":\"Sets the active provider for this vault.\"},\"setMinAmount(uint256)\":{\"notice\":\"Sets the minimum amount required for deposit and mint actions.\"},\"setProviders(address[])\":{\"notice\":\"Sets the list of providers for this vault.\"},\"setTimelock(address)\":{\"notice\":\"Sets the address of the timelock contract.\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury address for this vault.\"},\"setWithdrawFeePercent(uint256)\":{\"notice\":\"Sets the withdrawal fee percentage for this vault.\"},\"setupVault(uint256)\":{\"notice\":\"Sets up the vault with a specified amount of assets to prevent inflation attacks.\"},\"unpause(uint8)\":{\"notice\":\"Unpauses the specified action in the vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rebalancer.sol\":\"Rebalancer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x666c704c58d4cf404eecd6e4a898a87e25b00b45416678de914e160582c3ff17\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/Rebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC20, IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {IProvider} from \\\"./interfaces/IProvider.sol\\\";\\nimport {Vault} from \\\"./base/Vault.sol\\\";\\n\\n/**\\n * @title Rebalancer\\n */\\ncontract Rebalancer is Vault {\\n    using SafeERC20 for IERC20Metadata;\\n    using Math for uint256;\\n\\n    /**\\n     * @dev Errors\\n     */\\n    error Rebalancer__InvalidProvider();\\n    error Rebalancer__ExcessRebalanceFee();\\n\\n    /**\\n     * @dev Initializes the Rebalancer contract with the specified parameters.\\n     * @param asset_ The address of the underlying asset managed by the vault.\\n     * @param name_ The name of the tokenized vault.\\n     * @param symbol_ The symbol of the tokenized vault.\\n     * @param providers_ An array of providers serving as a liquidity source for lending and/or yield.\\n     * @param withdrawFeePercent_ The fee percentage applied to withdrawals.\\n     * @param timelock_ The address of the timelock contract.\\n     * @param treasury_ The address of the treasury.\\n     */\\n    constructor(\\n        address asset_,\\n        string memory name_,\\n        string memory symbol_,\\n        IProvider[] memory providers_,\\n        uint256 withdrawFeePercent_,\\n        address timelock_,\\n        address treasury_\\n    )\\n        Vault(\\n            asset_,\\n            name_,\\n            symbol_,\\n            providers_,\\n            withdrawFeePercent_,\\n            timelock_,\\n            treasury_\\n        )\\n    {}\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @inheritdoc IVault\\n     */\\n    function rebalance(\\n        uint256 assets,\\n        IProvider from,\\n        IProvider to,\\n        uint256 fee,\\n        bool activateToProvider\\n    ) external onlyOperator returns (bool) {\\n        if (\\n            !_validateProvider(address(from)) || !_validateProvider(address(to))\\n        ) {\\n            revert Rebalancer__InvalidProvider();\\n        }\\n\\n        _checkFee(fee, assets);\\n\\n        _delegateActionToProvider(assets, \\\"withdraw\\\", from);\\n        _delegateActionToProvider(assets - fee, \\\"deposit\\\", to);\\n\\n        if (fee > 0) {\\n            address _treasury = treasury;\\n\\n            _asset.safeTransfer(_treasury, fee);\\n            emit FeeCharged(_treasury, assets, fee);\\n        }\\n\\n        if (activateToProvider) {\\n            _setActiveProvider(to);\\n        }\\n\\n        emit RebalanceExecuted(\\n            assets,\\n            assets - fee,\\n            address(from),\\n            address(to)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Ensures the rebalance fee is within a reasonable limit.\\n     * @param fee The fee amount to check.\\n     * @param amount The amount used to calculate the allowable fee.\\n     */\\n    function _checkFee(uint256 fee, uint256 amount) internal pure {\\n        uint256 reasonableFee = amount.mulDiv(\\n            MAX_REBALANCE_FEE_PERCENT,\\n            PRECISION_FACTOR\\n        );\\n        if (fee > reasonableFee) {\\n            revert Rebalancer__ExcessRebalanceFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1724204ed140dd2954c0865486ab33ae60d198b9b1991a1aa12b8e5c027abe91\",\"license\":\"MIT\"},\"contracts/access/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title AccessManager\\n *\\n * @dev Inspired and modified from OpenZeppelin's AccessControl contract.\\n */\\ncontract AccessManager is Context {\\n    /**\\n     * @dev Errors\\n     */\\n    error AccessManager__CallerIsNotAdmin();\\n    error AccessManager__CallerIsNotOperator();\\n    error AccessManager__CallerIsNotExecutor();\\n    error AccessManager__CallerIsNotRootUpdater();\\n\\n    mapping(bytes32 role => mapping(address account => bool)) private _roles;\\n\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant ROOT_UPDATER_ROLE = keccak256(\\\"ROOT_UPDATER_ROLE\\\");\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Modifier that checks that an account has an admin role. Reverts\\n     * with an {AccessManager__CallerIsNotAdmin} error.\\n     */\\n    modifier onlyAdmin() {\\n        if (!hasRole(ADMIN_ROLE, _msgSender())) {\\n            revert AccessManager__CallerIsNotAdmin();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has an operator role. Reverts\\n     * with an {AccessManager__CallerIsNotOperator} error.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, _msgSender())) {\\n            revert AccessManager__CallerIsNotOperator();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has an executor role. Reverts\\n     * with an {AccessManager__CallerIsNotExecutor} error.\\n     */\\n    modifier onlyExecutor() {\\n        if (!hasRole(EXECUTOR_ROLE, _msgSender())) {\\n            revert AccessManager__CallerIsNotExecutor();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a root updater role. Reverts\\n     * with an {AccessManager__CallerIsNotRootUpdater} error.\\n     */\\n    modifier onlyRootUpdater() {\\n        if (!hasRole(ROOT_UPDATER_ROLE, _msgSender())) {\\n            revert AccessManager__CallerIsNotRootUpdater();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the deployer of the contract as the initial admin.\\n     */\\n    constructor() {\\n        _grantRole(ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual returns (bool) {\\n        return _roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public onlyAdmin {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public onlyAdmin {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role][account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role][account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29343100e267489847efb757b9c88c094ba5fe6deb7c4554c68e1b50ec1b4220\",\"license\":\"MIT\"},\"contracts/base/PausableActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title PausableActions\\n *\\n * @dev Inspired and modified from OpenZeppelin's Pausable contract.\\n */\\nabstract contract PausableActions is Context {\\n    /**\\n     * @dev Errors\\n     */\\n    error PausableActions__ActionPaused();\\n    error PausableActions__ActionNotPaused();\\n\\n    enum Actions {\\n        Deposit,\\n        Withdraw\\n    }\\n\\n    mapping(Actions => bool) private _actionPaused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account` for a specific `action`.\\n     */\\n    event Paused(address account, Actions action);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account` for a specific `action`.\\n     */\\n    event Unpaused(address account, Actions action);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the specified `action` is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The action must not be paused.\\n     */\\n    modifier whenNotPaused(Actions action) {\\n        _requireNotPaused(action);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the specified `action` is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The action must be paused.\\n     */\\n    modifier whenPaused(Actions action) {\\n        _requirePaused(action);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the specified `action` is paused, and false otherwise.\\n     */\\n    function paused(Actions action) public view returns (bool) {\\n        return _actionPaused[action];\\n    }\\n\\n    /**\\n     * @dev Throws if the specified `action` is paused.\\n     */\\n    function _requireNotPaused(Actions action) internal view {\\n        if (paused(action)) {\\n            revert PausableActions__ActionPaused();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the specified `action` is not paused.\\n     */\\n    function _requirePaused(Actions action) internal view {\\n        if (!paused(action)) {\\n            revert PausableActions__ActionNotPaused();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers paused state for the specified `action`.\\n     *\\n     * Requirements:\\n     *\\n     * - The action must not be paused.\\n     */\\n    function _pause(Actions action) internal whenNotPaused(action) {\\n        _actionPaused[action] = true;\\n        emit Paused(_msgSender(), action);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state for the specified `action`.\\n     *\\n     * Requirements:\\n     *\\n     * - The action must be paused.\\n     */\\n    function _unpause(Actions action) internal whenPaused(action) {\\n        _actionPaused[action] = false;\\n        emit Unpaused(_msgSender(), action);\\n    }\\n}\\n\",\"keccak256\":\"0x13c5f81fc4afadf35cea69f53336c5e73e617f5f68dc7dc9874c611408d2a04a\",\"license\":\"MIT\"},\"contracts/base/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {ERC20Permit, ERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IProvider} from \\\"../interfaces/IProvider.sol\\\";\\nimport {AccessManager} from \\\"../access/AccessManager.sol\\\";\\nimport {PausableActions} from \\\"./PausableActions.sol\\\";\\n\\n/**\\n * @title Vault\\n */\\nabstract contract Vault is ERC20Permit, AccessManager, PausableActions, IVault {\\n    using Math for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    /**\\n     * @dev Errors\\n     */\\n    error Vault__Unauthorized();\\n    error Vault__AddressZero();\\n    error Vault__InvalidInput();\\n    error Vault__DepositLessThanMin();\\n    error Vault__SetupAlreadyCompleted();\\n\\n    uint256 internal constant PRECISION_FACTOR = 1e18;\\n    uint256 internal constant MAX_WITHDRAW_FEE_PERCENT = 0.05 * 1e18; // 5%\\n    uint256 internal constant MAX_REBALANCE_FEE_PERCENT = 0.2 * 1e18; // 20%\\n\\n    IERC20Metadata internal immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    IProvider[] internal _providers;\\n    IProvider public activeProvider;\\n\\n    uint256 public minAmount;\\n    uint256 public withdrawFeePercent;\\n\\n    address public timelock;\\n    address public treasury;\\n\\n    bool public setupCompleted;\\n\\n    /**\\n     * @dev Reverts if called by any account other than the timelock contract.\\n     */\\n    modifier onlyTimelock() {\\n        if (msg.sender != timelock) {\\n            revert Vault__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the Vault contract with the specified parameters.\\n     * @param asset_ The address of the underlying asset managed by the vault.\\n     * @param name_ The name of the tokenized vault.\\n     * @param symbol_ The symbol of the tokenized vault.\\n     * @param providers_ An array of providers serving as a liquidity source for lending and/or yield.\\n     * @param withdrawFeePercent_ The fee percentage applied to withdrawals.\\n     * @param timelock_ The address of the timelock contract.\\n     * @param treasury_ The address of the treasury.\\n     */\\n    constructor(\\n        address asset_,\\n        string memory name_,\\n        string memory symbol_,\\n        IProvider[] memory providers_,\\n        uint256 withdrawFeePercent_,\\n        address timelock_,\\n        address treasury_\\n    ) ERC20(name_, symbol_) ERC20Permit(name_) {\\n        if (asset_ == address(0)) {\\n            revert Vault__AddressZero();\\n        }\\n\\n        _asset = IERC20Metadata(asset_);\\n        _underlyingDecimals = IERC20Metadata(asset_).decimals();\\n\\n        _setTimelock(timelock_);\\n        _setProviders(providers_);\\n        _setActiveProvider(providers_[0]);\\n        _setTreasury(treasury_);\\n        _setWithdrawFeePercent(withdrawFeePercent_);\\n        _setMinAmount(1e6);\\n\\n        /// @dev pause deposit and mint actions until vault setup is completed.\\n        _pause(Actions.Deposit);\\n    }\\n\\n    /*////////////////////\\n      ERC4626 Management\\n    ////////////////////*/\\n\\n    /**\\n     * @notice Returns the number of decimals used to get number representation.\\n     */\\n    function decimals()\\n        public\\n        view\\n        override(IERC20Metadata, ERC20)\\n        returns (uint8)\\n    {\\n        return _underlyingDecimals;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function asset() public view override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function totalAssets() public view override returns (uint256 assets) {\\n        return _getBalanceAtProviders();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function maxDeposit(address) public view override returns (uint256) {\\n        if (paused(Actions.Deposit)) {\\n            return 0;\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function maxMint(address) public view override returns (uint256) {\\n        if (paused(Actions.Deposit)) {\\n            return 0;\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function maxWithdraw(address owner) public view override returns (uint256) {\\n        if (paused(Actions.Withdraw)) {\\n            return 0;\\n        }\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function maxRedeem(address owner) public view override returns (uint256) {\\n        if (paused(Actions.Withdraw)) {\\n            return 0;\\n        }\\n        return balanceOf(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function previewMint(\\n        uint256 shares\\n    ) public view override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public override returns (uint256) {\\n        uint256 shares = previewDeposit(assets);\\n\\n        _validateDeposit(receiver, assets, shares);\\n        _deposit(msg.sender, receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public override returns (uint256) {\\n        uint256 assets = previewMint(shares);\\n\\n        _validateDeposit(receiver, assets, shares);\\n        _deposit(msg.sender, receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public override returns (uint256) {\\n        uint256 shares = previewWithdraw(assets);\\n        (uint256 validatedAssets, uint256 validatedShares) = _validateWithdraw(\\n            assets,\\n            shares,\\n            msg.sender,\\n            receiver,\\n            owner\\n        );\\n        _withdraw(\\n            msg.sender,\\n            receiver,\\n            owner,\\n            validatedAssets,\\n            validatedShares\\n        );\\n        return validatedShares;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC4626\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override returns (uint256) {\\n        uint256 assets = previewRedeem(shares);\\n        (uint256 validatedAssets, uint256 validatedShares) = _validateWithdraw(\\n            assets,\\n            shares,\\n            msg.sender,\\n            receiver,\\n            owner\\n        );\\n        _withdraw(\\n            msg.sender,\\n            receiver,\\n            owner,\\n            validatedAssets,\\n            validatedShares\\n        );\\n        return validatedAssets;\\n    }\\n\\n    /**\\n     * @dev Converts assets to shares equivalent, with support for rounding direction.\\n     *\\n     * @param assets The amount of assets to convert to shares.\\n     * @param rounding The direction of division remainder for conversion.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? assets\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Converts shares to assets equivalent, with support for rounding direction.\\n     *\\n     * @param shares The amount of shares to convert to assets.\\n     * @param rounding The direction of division remainder for conversion.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? shares\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Runs checks for all deposit or mint actions in this vault.\\n     * @param receiver The address receiving the deposit.\\n     * @param assets The amount of assets being deposited.\\n     * @param shares The amount of shares being minted for the receiver.\\n     */\\n    function _validateDeposit(\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal view whenNotPaused(Actions.Deposit) {\\n        if (receiver == address(0)) {\\n            revert Vault__AddressZero();\\n        }\\n        if (assets == 0 || shares == 0) {\\n            revert Vault__InvalidInput();\\n        }\\n        if (assets < minAmount) {\\n            revert Vault__DepositLessThanMin();\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a deposit at the active provider.\\n     * @param caller The address that initiated the deposit.\\n     * @param receiver The address to which shares are minted.\\n     * @param assets The amount transferred during this deposit.\\n     * @param shares The amount minted to receiver.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal {\\n        _asset.safeTransferFrom(caller, address(this), assets);\\n        _delegateActionToProvider(assets, \\\"deposit\\\", activeProvider);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Runs checks for all withdraw or redeem actions in this vault.\\n     * @param assets The amount of assets being withdrawn.\\n     * @param shares The amount of shares being burned during this withdrawal.\\n     * @param caller The address that initiated the withdrawal.\\n     * @param receiver The address to which the assets will be transferred.\\n     * @param owner The address whose shares will be burned.\\n     */\\n    function _validateWithdraw(\\n        uint256 assets,\\n        uint256 shares,\\n        address caller,\\n        address receiver,\\n        address owner\\n    )\\n        internal\\n        whenNotPaused(Actions.Withdraw)\\n        returns (uint256 validatedAssets, uint256 validatedShares)\\n    {\\n        if (receiver == address(0) || owner == address(0)) {\\n            revert Vault__AddressZero();\\n        }\\n        if (assets == 0 || shares == 0) {\\n            revert Vault__InvalidInput();\\n        }\\n\\n        uint256 _maxWithdraw = maxWithdraw(owner);\\n        if (assets > _maxWithdraw) {\\n            validatedAssets = _maxWithdraw;\\n            validatedShares = validatedAssets.mulDiv(shares, assets);\\n        } else {\\n            validatedAssets = assets;\\n            validatedShares = shares;\\n        }\\n\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, validatedShares);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a withdraw at the active provider.\\n     * @param caller The address that initiated the withdrawal.\\n     * @param receiver The address to which the assets will be transferred.\\n     * @param owner The address whose shares will be burned during this withdrawal.\\n     * @param assets The amount of assets being withdrawn from the vault.\\n     * @param shares The amount of shares being burned during this withdrawal.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal {\\n        uint256 withdrawFee = assets.mulDiv(\\n            withdrawFeePercent,\\n            PRECISION_FACTOR\\n        );\\n        uint256 assetsToReceiver = assets - withdrawFee;\\n\\n        _burn(owner, shares);\\n        _delegateActionToProvider(assets, \\\"withdraw\\\", activeProvider);\\n\\n        address _treasury = treasury;\\n\\n        _asset.safeTransfer(_treasury, withdrawFee);\\n        _asset.safeTransfer(receiver, assetsToReceiver);\\n\\n        emit FeeCharged(_treasury, assets, withdrawFee);\\n        emit Withdraw(caller, receiver, owner, assetsToReceiver, shares);\\n    }\\n\\n    /*/////////////////////\\n      REBALANCE functions\\n    /////////////////////*/\\n\\n    /**\\n     * @inheritdoc IVault\\n     */\\n    function setupVault(uint256 assets) external {\\n        if (setupCompleted) {\\n            revert Vault__SetupAlreadyCompleted();\\n        }\\n        if (assets < minAmount) {\\n            revert Vault__DepositLessThanMin();\\n        }\\n\\n        _unpause(Actions.Deposit);\\n\\n        _deposit(msg.sender, address(this), assets, assets);\\n        setupCompleted = true;\\n\\n        emit SetupCompleted(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Pauses the specified action in the vault.\\n     *\\n     * @param action The action to pause.\\n     */\\n    function pause(Actions action) external onlyAdmin {\\n        _pause(action);\\n    }\\n\\n    /**\\n     * @notice Unpauses the specified action in the vault.\\n     *\\n     * @param action The action to unpause.\\n     */\\n    function unpause(Actions action) external onlyAdmin {\\n        _unpause(action);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the timelock contract.\\n     * @param _timelock The address of the new timelock contract.\\n     */\\n    function setTimelock(address _timelock) external onlyTimelock {\\n        _setTimelock(_timelock);\\n    }\\n\\n    /**\\n     * @notice Sets the list of providers for this vault.\\n     * @param providers An array of provider contracts.\\n     */\\n    function setProviders(IProvider[] memory providers) external onlyTimelock {\\n        _setProviders(providers);\\n    }\\n\\n    /**\\n     * @notice Sets the active provider for this vault.\\n     * @param _activeProvider The contract of the new active provider.\\n     *\\n     */\\n    function setActiveProvider(IProvider _activeProvider) external onlyAdmin {\\n        _setActiveProvider(_activeProvider);\\n    }\\n\\n    /**\\n     * @notice Sets the treasury address for this vault.\\n     * @param _treasury The new treasury address.\\n     */\\n    function setTreasury(address _treasury) external onlyAdmin {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n     * @notice Sets the withdrawal fee percentage for this vault.\\n     * @param _withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    function setWithdrawFeePercent(\\n        uint256 _withdrawFeePercent\\n    ) external onlyAdmin {\\n        _setWithdrawFeePercent(_withdrawFeePercent);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum amount required for deposit and mint actions.\\n     * @param _minAmount The new minimum amount.\\n     */\\n    function setMinAmount(uint256 _minAmount) external onlyAdmin {\\n        _setMinAmount(_minAmount);\\n    }\\n\\n    /**\\n     * @dev Internal function to update the address of the timelock contract.\\n     * @param _timelock The address of the new timelock contract.\\n     */\\n    function _setTimelock(address _timelock) internal {\\n        if (_timelock == address(0)) {\\n            revert Vault__AddressZero();\\n        }\\n        timelock = _timelock;\\n        emit TimelockUpdated(_timelock);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the providers for this vault.\\n     * @param providers An array of provider contracts.\\n     */\\n    function _setProviders(IProvider[] memory providers) internal {\\n        for (uint256 i; i < providers.length; i++) {\\n            if (address(providers[i]) == address(0)) {\\n                revert Vault__AddressZero();\\n            }\\n            _asset.forceApprove(\\n                providers[i].getSource(asset(), address(this), address(0)),\\n                type(uint256).max\\n            );\\n        }\\n        _providers = providers;\\n\\n        emit ProvidersUpdated(providers);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the active provider for this vault.\\n     * @param _activeProvider The contract of the new active provider.\\n     */\\n    function _setActiveProvider(IProvider _activeProvider) internal {\\n        if (!_validateProvider(address(_activeProvider))) {\\n            revert Vault__InvalidInput();\\n        }\\n        activeProvider = _activeProvider;\\n        emit ActiveProviderUpdated(_activeProvider);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the treasury address for this vault.\\n     * @param _treasury The new treasury address.\\n     */\\n    function _setTreasury(address _treasury) internal {\\n        if (_treasury == address(0)) {\\n            revert Vault__AddressZero();\\n        }\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the withdrawal fee percentage for this vault.\\n     * @param _withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    function _setWithdrawFeePercent(uint256 _withdrawFeePercent) internal {\\n        if (_withdrawFeePercent > MAX_WITHDRAW_FEE_PERCENT) {\\n            revert Vault__InvalidInput();\\n        }\\n        withdrawFeePercent = _withdrawFeePercent;\\n        emit WithdrawFeePercentUpdated(_withdrawFeePercent);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the minimum amount required for deposit and mint actions.\\n     * @param _minAmount The new minimum amount.\\n     */\\n    function _setMinAmount(uint256 _minAmount) internal {\\n        minAmount = _minAmount;\\n        emit MinAmountUpdated(_minAmount);\\n    }\\n\\n    /**\\n     * @dev Delegates an action to a provider.\\n     * @param assets The amount of assets involved in the action.\\n     * @param actionName The identifier of the method to call.\\n     * @param provider The provider contract to which the action is delegated.\\n     */\\n    function _delegateActionToProvider(\\n        uint256 assets,\\n        string memory actionName,\\n        IProvider provider\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            string(abi.encodePacked(actionName, \\\"(uint256,address)\\\")),\\n            assets,\\n            address(this)\\n        );\\n        address(provider).functionDelegateCall(data);\\n    }\\n\\n    /**\\n     * @dev Returns the total balance of the asset held by this vault across all listed providers.\\n     */\\n    function _getBalanceAtProviders()\\n        internal\\n        view\\n        returns (uint256 totalBalance)\\n    {\\n        uint256 providerBalance;\\n        uint256 count = _providers.length;\\n        for (uint256 i; i < count; i++) {\\n            providerBalance = _providers[i].getDepositBalance(\\n                address(this),\\n                this\\n            );\\n            totalBalance += providerBalance;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the specified provider is in the list of providers.\\n     * @param provider The address of the provider to validate.\\n     */\\n    function _validateProvider(\\n        address provider\\n    ) internal view returns (bool valid) {\\n        uint256 count = _providers.length;\\n        for (uint256 i; i < count; i++) {\\n            if (provider == address(_providers[i])) {\\n                valid = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the amount of assets owned by the specified address.\\n     * @param owner The address of the account whose asset balance is checked.\\n     */\\n    function getBalanceOfAsset(\\n        address owner\\n    ) public view returns (uint256 assets) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    /**\\n     * @notice Returns the array of providers of this vault.\\n     */\\n    function getProviders() public view returns (IProvider[] memory) {\\n        return _providers;\\n    }\\n}\\n\",\"keccak256\":\"0x3d004f85618968dd9beea70a4231bf852ba700d108d1a53babc64ddab6695131\",\"license\":\"MIT\"},\"contracts/interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title IProvider\\n */\\ninterface IProvider {\\n    /**\\n     * @notice Returns the identifier of the provider.\\n     */\\n    function getIdentifier() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the source address that requires ERC20 approval for vault actions.\\n     *\\n     * @param keyOne The first key for identification\\n     * @param keyTwo The second key for identification\\n     * @param keyThree The third key for identification\\n     *\\n     * @dev Some provider implementations may not require all keys.\\n     */\\n    function getSource(\\n        address keyOne,\\n        address keyTwo,\\n        address keyThree\\n    ) external view returns (address source);\\n\\n    /**\\n     * @notice Performs a deposit at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to deposit.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Performs a withdraw at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to withdraw.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Returns the deposit balance of a user at the provider.\\n     *\\n     * @param user The address of the user whose balance is needed.\\n     * @param vault The vault required by specific providers with multi-markets; otherwise, pass address(0).\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Returns the latest supply annual percentage rate (APR) at the provider.\\n     *\\n     * @param vault The vault required by specific provider with multi-markets; otherwise, pass address(0).\\n     *\\n     * @dev Must return the rate in ray units (1e27).\\n     */\\n    function getDepositRate(IVault vault) external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IProvider} from \\\"./IProvider.sol\\\";\\n\\n/**\\n * @title IVault\\n */\\ninterface IVault is IERC4626 {\\n    /**\\n     * @notice Emitted when the vault setup is completed.\\n     *\\n     * @param setupAddress The address that performed the vault setup.\\n     */\\n    event SetupCompleted(address indexed setupAddress);\\n\\n    /**\\n     * @notice Emitted when the timelock contract is changed.\\n     *\\n     * @param timelock The new timelock contract address.\\n     */\\n    event TimelockUpdated(address indexed timelock);\\n\\n    /**\\n     * @notice Emitted when the available providers for the vault change.\\n     *\\n     * @param providers The new array of providers.\\n     */\\n    event ProvidersUpdated(IProvider[] providers);\\n\\n    /**\\n     * @notice Emitted when the active provider is changed.\\n     *\\n     * @param activeProvider The new active provider.\\n     */\\n    event ActiveProviderUpdated(IProvider activeProvider);\\n\\n    /**\\n     * @notice Emitted when the treasury address is changed.\\n     *\\n     * @param treasury The new treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the withdrawal fee percentage is changed.\\n     *\\n     * @param withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    event WithdrawFeePercentUpdated(uint256 withdrawFeePercent);\\n\\n    /**\\n     * @notice Emitted when the minimum amount is changed.\\n     *\\n     * @param minAmount The new minimum amount.\\n     */\\n    event MinAmountUpdated(uint256 minAmount);\\n\\n    /**\\n     * @notice Emitted when a fee is charged.\\n     *\\n     * @param treasury The treasury address of the vault.\\n     * @param assets The total amount from which the fee is charged.\\n     * @param fee The amount charged.\\n     */\\n    event FeeCharged(address indexed treasury, uint256 assets, uint256 fee);\\n\\n    /**\\n     * @notice Emitted when the vault is rebalanced.\\n     *\\n     * @param assetsFrom The amount of assets rebalanced from.\\n     * @param assetsTo The amount of assets rebalanced to.\\n     * @param from The provider from which assets are rebalanced.\\n     * @param to The provider to which assets are rebalanced.\\n     */\\n    event RebalanceExecuted(\\n        uint256 assetsFrom,\\n        uint256 assetsTo,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred.\\n     *\\n     * @param to The address to which rewards are transferred.\\n     * @param amount The amount of rewards transferred.\\n     */\\n    event RewardsTransferred(address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the rewards distributor contract is changed.\\n     *\\n     * @param rewardsDistributor The new rewards distributor contract address.\\n     */\\n    event DistributorUpdated(address indexed rewardsDistributor);\\n\\n    /**\\n     * @notice Sets up the vault with a specified amount of assets to prevent inflation attacks.\\n     * @dev Refer to: https://rokinot.github.io/hatsfinance\\n     *\\n     * @param assets The amount used to set up the vault.\\n     */\\n    function setupVault(uint256 assets) external;\\n\\n    /**\\n     * @notice Performs rebalancing of the vault by moving funds across providers.\\n     * @param assets The amount of assets to be rebalanced.\\n     * @param from The provider currently holding the assets.\\n     * @param to The provider receiving the assets.\\n     * @param fee The fee amount charged for the rebalancing.\\n     * @param activateToProvider A flag indicating whether to mark the receiving provider as active.\\n     */\\n    function rebalance(\\n        uint256 assets,\\n        IProvider from,\\n        IProvider to,\\n        uint256 fee,\\n        bool activateToProvider\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b50604051620041e0380380620041e0833981016040819052620000359162000bb0565b868686868686868580604051806040016040528060018152602001603160f81b815250888881600390816200006b919062000d96565b5060046200007a828262000d96565b506200008c915083905060056200026b565b610120526200009d8160066200026b565b61014052815160208084019190912060e052815190820120610100524660a0526200012b60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000142600033620002a4565b6001600160a01b0387166200016a57604051633335653160e01b815260040160405180910390fd5b6001600160a01b0387166101608190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015620001b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001dc919062000e62565b60ff1661018052620001ee8262000349565b620001f984620003bb565b620002278460008151811062000213576200021362000e8e565b60200260200101516200054260201b60201c565b6200023281620005b8565b6200023d836200062a565b6200024b620f424062000689565b620002576000620006bf565b505050505050505050505050505062000fec565b60006020835110156200028b5762000283836200075f565b90506200029e565b8162000298848262000d96565b5060ff90505b92915050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16620003455760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003043390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6001600160a01b0381166200037157604051633335653160e01b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0383169081179091556040517fc046b9e8f0cd9b70a3b838962e9c229277fbb7abee68ea0fad4acf2898ed2ca990600090a250565b60005b8151811015620004ef5760006001600160a01b0316828281518110620003e857620003e862000e8e565b60200260200101516001600160a01b0316036200041857604051633335653160e01b815260040160405180910390fd5b620004e682828151811062000431576200043162000e8e565b60200260200101516001600160a01b03166373f64d4462000457620007ab60201b60201c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260006044820152606401602060405180830381865afa158015620004a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cf919062000ea4565b610160516001600160a01b031690600019620007b2565b600101620003be565b5080516200050590600a90602084019062000a24565b507f5f589bfb97387c6d7ce41557510dba9ca4a577876489cacc87a22a395b8b13ca8160405162000537919062000ec4565b60405180910390a150565b6200054d816200088d565b6200056b5760405163207562d360e21b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0383161790556040517f34ea2e3abaf449e8227dcf35ffa3aa94f2b89384cdf95fe6fd34dc2aefc59b09906200053790839062000f13565b6001600160a01b038116620005e057604051633335653160e01b815260040160405180910390fd5b600f80546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b66b1a2bc2ec50000811115620006535760405163207562d360e21b815260040160405180910390fd5b600d8190556040518181527fd84a6d804e5eabc5849fa0d39e4545509125b95c297e1ec5ed98fad0f66befb89060200162000537565b600c8190556040518181527f7a94dccf633222d5f6174016b33ae91ce3449a59c8ac979df57cc84ea1a5b2ef9060200162000537565b80620006cb81620008ee565b600160096000846001811115620006e657620006e662000f27565b6001811115620006fa57620006fa62000f27565b81526020810191909152604001600020805460ff19169115159190911790557f534f879afd40abb4e39f8e1b77a316be4c8e3521d9cf5a3a3db8959d574d4559620007423390565b836040516200075392919062000f3d565b60405180910390a15050565b600080829050601f8151111562000796578260405163305a27a960e01b81526004016200078d919062000f79565b60405180910390fd5b8051620007a38262000fae565b179392505050565b6101605190565b6000836001600160a01b031663095ea7b38484604051602401620007d892919062000fd3565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505090506200081984826200091b60201b60201c565b62000887576200087b84856001600160a01b031663095ea7b38660006040516024016200084892919062000fd3565b60408051808303601f1901815291905260208101805160e09390931b6001600160e01b0393841617905291506200096d16565b6200088784826200096d565b50505050565b600a54600090815b81811015620008e757600a8181548110620008b457620008b462000e8e565b6000918252602090912001546001600160a01b0390811690851603620008de5760019250620008e7565b60010162000895565b5050919050565b620008f981620009db565b1562000918576040516336a4bf2d60e01b815260040160405180910390fd5b50565b6000806000806020600086516020880160008a5af192503d91506000519050828015620009635750811562000954578060011462000963565b6000866001600160a01b03163b115b9695505050505050565b600080602060008451602086016000885af18062000991576040513d6000823e3d81fd5b50506000513d91508115620009ab578060011415620009b8565b6001600160a01b0384163b155b15620008875783604051635274afe760e01b81526004016200078d919062000f13565b600060096000836001811115620009f657620009f662000f27565b600181111562000a0a5762000a0a62000f27565b815260208101919091526040016000205460ff1692915050565b82805482825590600052602060002090810192821562000a7c579160200282015b8281111562000a7c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000a45565b5062000a8a92915062000a8e565b5090565b5b8082111562000a8a576000815560010162000a8f565b6001600160a01b03811681146200091857600080fd5b805162000ac88162000aa5565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000b0e5762000b0e62000acd565b604052919050565b60005b8381101562000b3357818101518382015260200162000b19565b50506000910152565b600082601f83011262000b4e57600080fd5b81516001600160401b0381111562000b6a5762000b6a62000acd565b62000b7f601f8201601f191660200162000ae3565b81815284602083860101111562000b9557600080fd5b62000ba882602083016020870162000b16565b949350505050565b600080600080600080600060e0888a03121562000bcc57600080fd5b875162000bd98162000aa5565b602089810151919850906001600160401b038082111562000bf957600080fd5b62000c078c838d0162000b3c565b985060408b015191508082111562000c1e57600080fd5b62000c2c8c838d0162000b3c565b975060608b015191508082111562000c4357600080fd5b818b0191508b601f83011262000c5857600080fd5b81518181111562000c6d5762000c6d62000acd565b8060051b915062000c8084830162000ae3565b818152918301840191848101908e84111562000c9b57600080fd5b938501935b8385101562000cc9578451925062000cb88362000aa5565b828252938501939085019062000ca0565b8099505050505050506080880151925062000ce760a0890162000abb565b915062000cf760c0890162000abb565b905092959891949750929550565b600181811c9082168062000d1a57607f821691505b60208210810362000d3b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000d91576000816000526020600020601f850160051c8101602086101562000d6c5750805b601f850160051c820191505b8181101562000d8d5782815560010162000d78565b5050505b505050565b81516001600160401b0381111562000db25762000db262000acd565b62000dca8162000dc3845462000d05565b8462000d41565b602080601f83116001811462000e02576000841562000de95750858301515b600019600386901b1c1916600185901b17855562000d8d565b600085815260208120601f198616915b8281101562000e335788860151825594840194600190910190840162000e12565b508582101562000e525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121562000e7557600080fd5b815160ff8116811462000e8757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000eb757600080fd5b815162000e878162000aa5565b6020808252825182820181905260009190848201906040850190845b8181101562000f075783516001600160a01b03168352928401929184019160010162000ee0565b50909695505050505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604081016002831062000f6c57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b602081526000825180602084015262000f9a81604085016020870162000b16565b601f01601f19169190910160400192915050565b8051602080830151919081101562000d3b5760001960209190910360031b1b16919050565b6001600160a01b03929092168252602082015260400190565b60805160a05160c05160e0516101005161012051610140516101605161018051613160620010806000396000610439015260008181610b7e01528181610d9a0152818161149b0152818161165f01528181611df70152611e2b01526000611c4a01526000611c1d015260006118f1015260006118c9015260006118240152600061184e0152600061187801526131606000f3fe6080604052600436106102745760003560e01c806301e1d1141461028057806306fdde03146102a857806307a2d13a146102ca57806307bd0265146102ea578063095ea7b31461031e5780630a28a4771461034e5780630fa275391461036e57806318160ddd146103905780631b98f6ac146103a557806323b872dd146103c55780632f2ff15d146103e5578063301c7e5d14610405578063313ce567146104255780633644e5151461046357806338d52e0f14610478578063402d267d1461049a578063447cb896146104ba578063495ef705146104da5780634cdad506146102ca5780635ac86ab7146104f0578063609da8971461051057806361d027b3146105315780636e553f651461055157806370a082311461057157806371e114301461059157806375b238fc146105b15780637abac329146105c65780637ecebe00146105e657806384b0196e14610606578063852972791461062e578063897b06371461064e57806391d148541461066e57806394bf804d1461068e57806395d89b41146106ae57806397f75dd9146106c35780639b2cb5d8146106e3578063a9059cbb146106f9578063b3d7f6b914610719578063b460af9414610739578063ba08765214610759578063bdacb30314610779578063c63d75b61461049a578063c6e6f59214610799578063ce96cb77146107b9578063d33219b4146107d9578063d505accf146107f9578063d547741f14610819578063d905777e14610839578063d9ab2c5c14610859578063dd62ed3e1461088c578063edc922a9146108ac578063edf07f15146108ce578063ef8b30f714610799578063f0f44260146108ee578063f5b541a61461090e57600080fd5b3661027b57005b600080fd5b34801561028c57600080fd5b50610295610930565b6040519081526020015b60405180910390f35b3480156102b457600080fd5b506102bd61093f565b60405161029f9190612a9f565b3480156102d657600080fd5b506102956102e5366004612ab2565b6109d1565b3480156102f657600080fd5b506102957fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b34801561032a57600080fd5b5061033e610339366004612ae0565b6109e4565b604051901515815260200161029f565b34801561035a57600080fd5b50610295610369366004612ab2565b6109fc565b34801561037a57600080fd5b5061038e610389366004612ab2565b610a09565b005b34801561039c57600080fd5b50600254610295565b3480156103b157600080fd5b5061038e6103c0366004612b32565b610aae565b3480156103d157600080fd5b5061033e6103e0366004612bf6565b610ae5565b3480156103f157600080fd5b5061038e610400366004612c37565b610b0b565b34801561041157600080fd5b5061038e610420366004612c67565b610b41565b34801561043157600080fd5b5060405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161029f565b34801561046f57600080fd5b50610295610b72565b34801561048457600080fd5b5061048d610b7c565b60405161029f9190612c88565b3480156104a657600080fd5b506102956104b5366004612c9c565b610ba0565b3480156104c657600080fd5b5061038e6104d5366004612ab2565b610bc2565b3480156104e657600080fd5b50610295600d5481565b3480156104fc57600080fd5b5061033e61050b366004612c67565b610bf3565b34801561051c57600080fd5b50600f5461033e90600160a01b900460ff1681565b34801561053d57600080fd5b50600f5461048d906001600160a01b031681565b34801561055d57600080fd5b5061029561056c366004612c37565b610c36565b34801561057d57600080fd5b5061029561058c366004612c9c565b610c5b565b34801561059d57600080fd5b5061038e6105ac366004612c9c565b610c76565b3480156105bd57600080fd5b50610295600081565b3480156105d257600080fd5b5061033e6105e1366004612cb9565b610ca7565b3480156105f257600080fd5b50610295610601366004612c9c565b610e5f565b34801561061257600080fd5b5061061b610e7d565b60405161029f9796959493929190612d1d565b34801561063a57600080fd5b50610295610649366004612c9c565b610ec3565b34801561065a57600080fd5b5061038e610669366004612ab2565b610ed1565b34801561067a57600080fd5b5061033e610689366004612c37565b610f02565b34801561069a57600080fd5b506102956106a9366004612c37565b610f2d565b3480156106ba57600080fd5b506102bd610f52565b3480156106cf57600080fd5b50600b5461048d906001600160a01b031681565b3480156106ef57600080fd5b50610295600c5481565b34801561070557600080fd5b5061033e610714366004612ae0565b610f61565b34801561072557600080fd5b50610295610734366004612ab2565b610f6f565b34801561074557600080fd5b50610295610754366004612db6565b610f7c565b34801561076557600080fd5b50610295610774366004612db6565b610fb5565b34801561078557600080fd5b5061038e610794366004612c9c565b610fee565b3480156107a557600080fd5b506102956107b4366004612ab2565b611022565b3480156107c557600080fd5b506102956107d4366004612c9c565b61102f565b3480156107e557600080fd5b50600e5461048d906001600160a01b031681565b34801561080557600080fd5b5061038e610814366004612df8565b611054565b34801561082557600080fd5b5061038e610834366004612c37565b611184565b34801561084557600080fd5b50610295610854366004612c9c565b6111b6565b34801561086557600080fd5b506102957e9ab23a1010d07a0450a1fbea1d84169b57d2c2273b54bff0f20c3e90199b5d81565b34801561089857600080fd5b506102956108a7366004612e6f565b6111d8565b3480156108b857600080fd5b506108c1611203565b60405161029f9190612e9d565b3480156108da57600080fd5b5061038e6108e9366004612c67565b611264565b3480156108fa57600080fd5b5061038e610909366004612c9c565b611295565b34801561091a57600080fd5b5061029560008051602061310b83398151915281565b600061093a6112c6565b905090565b60606003805461094e90612ede565b80601f016020809104026020016040519081016040528092919081815260200182805461097a90612ede565b80156109c75780601f1061099c576101008083540402835291602001916109c7565b820191906000526020600020905b8154815290600101906020018083116109aa57829003601f168201915b5050505050905090565b60006109de826000611383565b92915050565b6000336109f28185856113ba565b5060019392505050565b60006109de8260016113cc565b600f54600160a01b900460ff1615610a3457604051632b2cba5d60e01b815260040160405180910390fd5b600c54811015610a57576040516309bb724360e21b815260040160405180910390fd5b610a6160006113fe565b610a6d3330838461148e565b600f805460ff60a01b1916600160a01b17905560405133907fb1fa1aae20fc88a51add616c46f8bc3a8d65d75b8fbe30fb0a6a2df2e773632290600090a250565b600e546001600160a01b03163314610ad95760405163084312d160e41b815260040160405180910390fd5b610ae281611555565b50565b600033610af38582856116df565b610afe858585611732565b60019150505b9392505050565b610b16600033610f02565b610b3357604051633dcaff7960e21b815260040160405180910390fd5b610b3d8282611791565b5050565b610b4c600033610f02565b610b6957604051633dcaff7960e21b815260040160405180910390fd5b610ae2816113fe565b600061093a611817565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000610bac6000610bf3565b15610bb957506000919050565b50600019919050565b610bcd600033610f02565b610bea57604051633dcaff7960e21b815260040160405180910390fd5b610ae281611942565b600060096000836001811115610c0b57610c0b612f18565b6001811115610c1c57610c1c612f18565b815260208101919091526040016000205460ff1692915050565b600080610c4284611022565b9050610c4f83858361199f565b610b043384868461148e565b6001600160a01b031660009081526020819052604090205490565b610c81600033610f02565b610c9e57604051633dcaff7960e21b815260040160405180910390fd5b610ae281611a1d565b6000610cc160008051602061310b83398151915233610f02565b610cde57604051635be2897760e11b815260040160405180910390fd5b610ce785611a8e565b1580610cf95750610cf784611a8e565b155b15610d17576040516301d9c4ab60e21b815260040160405180910390fd5b610d218387611ae8565b610d4c8660405180604001604052806008815260200167776974686472617760c01b81525087611b28565b610d7f610d598488612f44565b6040518060400160405280600781526020016619195c1bdcda5d60ca1b81525086611b28565b8215610df457600f546001600160a01b0390811690610dc1907f0000000000000000000000000000000000000000000000000000000000000000168286611bbe565b806001600160a01b03166000805160206130eb8339815191528886604051610dea929190612f57565b60405180910390a2505b8115610e0357610e0384611a1d565b6001600160a01b038085169086167f086c47503692f7dac9bd7ce63f1c29c814ce3ae59ee29390e242340d6dd8d58f88610e3d8782612f44565b604051610e4b929190612f57565b60405180910390a350600195945050505050565b6001600160a01b0381166000908152600760205260408120546109de565b600060608060008060006060610e91611c16565b610e99611c43565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006109de6102e583610c5b565b610edc600033610f02565b610ef957604051633dcaff7960e21b815260040160405180910390fd5b610ae281611c70565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080610f3984610f6f565b9050610f4683828661199f565b610b043384838761148e565b60606004805461094e90612ede565b6000336109f2818585611732565b60006109de826001611383565b600080610f88856109fc565b9050600080610f9a8784338989611ca5565b91509150610fab3387878585611d78565b9695505050505050565b600080610fc1856109d1565b9050600080610fd38388338989611ca5565b91509150610fe43387878585611d78565b5095945050505050565b600e546001600160a01b031633146110195760405163084312d160e41b815260040160405180910390fd5b610ae281611ee4565b60006109de8260006113cc565b600061103b6001610bf3565b1561104857506000919050565b6109de6102e583610c5b565b8342111561107d5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886110ca8c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061112582611f55565b9050600061113582878787611f82565b9050896001600160a01b0316816001600160a01b03161461116d57808a6040516325c0072360e11b8152600401611074929190612f65565b6111788a8a8a6113ba565b50505050505050505050565b61118f600033610f02565b6111ac57604051633dcaff7960e21b815260040160405180910390fd5b610b3d8282611fb0565b60006111c26001610bf3565b156111cf57506000919050565b6109de82610c5b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600a8054806020026020016040519081016040528092919081815260200182805480156109c757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161123d575050505050905090565b61126f600033610f02565b61128c57604051633dcaff7960e21b815260040160405180910390fd5b610ae281612017565b6112a0600033610f02565b6112bd57604051633dcaff7960e21b815260040160405180910390fd5b610ae281612090565b600a546000908190815b8181101561137d57600a81815481106112eb576112eb612f7f565b6000918252602090912001546040516302b844a960e21b81526001600160a01b0390911690630ae112a4906113269030908190600401612f65565b602060405180830381865afa158015611343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113679190612f95565b92506113738385612fae565b93506001016112d0565b50505090565b60008061138f60025490565b905080156113b0576113ab6113a2610930565b85908386612101565b6113b2565b835b949350505050565b6113c7838383600161214e565b505050565b6000806113d860025490565b90508315806113e5575080155b6113b0576113ab816113f5610930565b86919086612101565b8061140881612215565b60006009600084600181111561142057611420612f18565b600181111561143157611431612f18565b81526020810191909152604001600020805460ff19169115159190911790557f4cd3e1443d03aba343c5d882744f8f172c07b495e955ac3defb325cbd73c8550335b83604051611482929190612fc1565b60405180910390a15050565b6114c36001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685308561223b565b60408051808201909152600781526619195c1bdcda5d60ca1b6020820152600b546114f89184916001600160a01b0316611b28565b6115028382612274565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611547929190612f57565b60405180910390a350505050565b60005b81518110156116905760006001600160a01b031682828151811061157e5761157e612f7f565b60200260200101516001600160a01b0316036115ad57604051633335653160e01b815260040160405180910390fd5b6116888282815181106115c2576115c2612f7f565b60200260200101516001600160a01b03166373f64d446115e0610b7c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260006044820152606401602060405180830381865afa158015611631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116559190612ffc565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906000196122aa565b600101611558565b5080516116a490600a9060208401906129d5565b507f5f589bfb97387c6d7ce41557510dba9ca4a577876489cacc87a22a395b8b13ca816040516116d49190612e9d565b60405180910390a150565b60006116eb84846111d8565b9050600019811461172c578181101561171d57828183604051637dc7a0d960e11b815260040161107493929190613019565b61172c8484848403600061214e565b50505050565b6001600160a01b03831661175c576000604051634b637e8f60e11b81526004016110749190612c88565b6001600160a01b03821661178657600060405163ec442f0560e01b81526004016110749190612c88565b6113c783838361233c565b61179b8282610f02565b610b3d5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561187057507f000000000000000000000000000000000000000000000000000000000000000046145b1561189a57507f000000000000000000000000000000000000000000000000000000000000000090565b61093a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b66b1a2bc2ec5000081111561196a5760405163207562d360e21b815260040160405180910390fd5b600d8190556040518181527fd84a6d804e5eabc5849fa0d39e4545509125b95c297e1ec5ed98fad0f66befb8906020016116d4565b60006119aa81612453565b6001600160a01b0384166119d157604051633335653160e01b815260040160405180910390fd5b8215806119dc575081155b156119fa5760405163207562d360e21b815260040160405180910390fd5b600c5483101561172c576040516309bb724360e21b815260040160405180910390fd5b611a2681611a8e565b611a435760405163207562d360e21b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0383161790556040517f34ea2e3abaf449e8227dcf35ffa3aa94f2b89384cdf95fe6fd34dc2aefc59b09906116d4908390612c88565b600a54600090815b81811015611ae157600a8181548110611ab157611ab1612f7f565b6000918252602090912001546001600160a01b0390811690851603611ad95760019250611ae1565b600101611a96565b5050919050565b6000611b05826702c68af0bb140000670de0b6b3a764000061247a565b9050808311156113c7576040516337fa464560e21b815260040160405180910390fd5b600082604051602001611b3b919061303a565b60408051601f1981840301815290829052602482018690523060448301529060640160408051601f198184030181529082905291611b789161306f565b6040519081900390206020820180516001600160e01b03166001600160e01b03199092169190911790529050611bb76001600160a01b03831682612535565b5050505050565b6113c783846001600160a01b031663a9059cbb8585604051602401611be492919061308b565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506125a2565b606061093a7f0000000000000000000000000000000000000000000000000000000000000000600561260a565b606061093a7f0000000000000000000000000000000000000000000000000000000000000000600661260a565b600c8190556040518181527f7a94dccf633222d5f6174016b33ae91ce3449a59c8ac979df57cc84ea1a5b2ef906020016116d4565b6000806001611cb381612453565b6001600160a01b0385161580611cd057506001600160a01b038416155b15611cee57604051633335653160e01b815260040160405180910390fd5b871580611cf9575086155b15611d175760405163207562d360e21b815260040160405180910390fd5b6000611d228561102f565b905080891115611d4157925082611d3a81898b61247a565b9250611d48565b8893508792505b846001600160a01b0316876001600160a01b031614611d6c57611d6c8588856116df565b50509550959350505050565b600d54600090611d92908490670de0b6b3a764000061247a565b90506000611da08285612f44565b9050611dac85846126b5565b604080518082019091526008815267776974686472617760c01b6020820152600b54611de29186916001600160a01b0316611b28565b600f546001600160a01b0390811690611e1e907f0000000000000000000000000000000000000000000000000000000000000000168285611bbe565b611e526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884611bbe565b806001600160a01b03166000805160206130eb8339815191528685604051611e7b929190612f57565b60405180910390a2856001600160a01b0316876001600160a01b0316896001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8588604051611ed2929190612f57565b60405180910390a45050505050505050565b6001600160a01b038116611f0b57604051633335653160e01b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0383169081179091556040517fc046b9e8f0cd9b70a3b838962e9c229277fbb7abee68ea0fad4acf2898ed2ca990600090a250565b60006109de611f62611817565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080611f94888888886126eb565b925092509250611fa482826127b0565b50909695505050505050565b611fba8282610f02565b15610b3d5760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b8061202181612453565b60016009600084600181111561203957612039612f18565b600181111561204a5761204a612f18565b81526020810191909152604001600020805460ff19169115159190911790557f534f879afd40abb4e39f8e1b77a316be4c8e3521d9cf5a3a3db8959d574d455933611473565b6001600160a01b0381166120b757604051633335653160e01b815260040160405180910390fd5b600f80546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b600061213061210f83612869565b801561212b575060008480612126576121266130a4565b868809115b151590565b61213b86868661247a565b6121459190612fae565b95945050505050565b6001600160a01b03841661217857600060405163e602df0560e01b81526004016110749190612c88565b6001600160a01b0383166121a2576000604051634a1406b160e11b81526004016110749190612c88565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561172c57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161154791815260200190565b61221e81610bf3565b610ae2576040516360f8581d60e01b815260040160405180910390fd5b6040516001600160a01b03848116602483015283811660448301526064820183905261172c9186918216906323b872dd90608401611be4565b6001600160a01b03821661229e57600060405163ec442f0560e01b81526004016110749190612c88565b610b3d6000838361233c565b6000836001600160a01b031663095ea7b384846040516024016122ce92919061308b565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505090506123078482612896565b61172c5761233284856001600160a01b031663095ea7b3866000604051602401611be492919061308b565b61172c84826125a2565b6001600160a01b03831661236757806002600082825461235c9190612fae565b909155506123c69050565b6001600160a01b038316600090815260208190526040902054818110156123a75783818360405163391434e360e21b815260040161107493929190613019565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166123e257600280548290039055612401565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161244691815260200190565b60405180910390a3505050565b61245c81610bf3565b15610ae2576040516336a4bf2d60e01b815260040160405180910390fd5b60008383028160001985870982811083820303915050806000036124b1578382816124a7576124a76130a4565b0492505050610b04565b8084116124c8576124c860038515026011186128e0565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6060600080846001600160a01b031684604051612552919061306f565b600060405180830381855af49150503d806000811461258d576040519150601f19603f3d011682016040523d82523d6000602084013e612592565b606091505b50915091506121458583836128f2565b600080602060008451602086016000885af1806125c5576040513d6000823e3d81fd5b50506000513d915081156125dd5780600114156125ea565b6001600160a01b0384163b155b1561172c5783604051635274afe760e01b81526004016110749190612c88565b606060ff83146126245761261d83612945565b90506109de565b81805461263090612ede565b80601f016020809104026020016040519081016040528092919081815260200182805461265c90612ede565b80156126a95780601f1061267e576101008083540402835291602001916126a9565b820191906000526020600020905b81548152906001019060200180831161268c57829003601f168201915b505050505090506109de565b6001600160a01b0382166126df576000604051634b637e8f60e11b81526004016110749190612c88565b610b3d8260008361233c565b600080806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0384111561271c57506000915060039050826127a6565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612770573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661279c575060009250600191508290506127a6565b9250600091508190505b9450945094915050565b60008260038111156127c4576127c4612f18565b036127cd575050565b60018260038111156127e1576127e1612f18565b036127ff5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561281357612813612f18565b036128345760405163fce698f760e01b815260048101829052602401611074565b600382600381111561284857612848612f18565b03610b3d576040516335e2f38360e21b815260048101829052602401611074565b6000600282600381111561287f5761287f612f18565b61288991906130ba565b60ff166001149050919050565b6000806000806020600086516020880160008a5af192503d91506000519050828015610fab575081156128cc5780600114610fab565b50505050506001600160a01b03163b151590565b634e487b71600052806020526024601cfd5b6060826129075761290282612984565b610b04565b815115801561291e57506001600160a01b0384163b155b1561293e5783604051639996b31560e01b81526004016110749190612c88565b5080610b04565b60606000612952836129ad565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b8051156129945780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b600060ff8216601f8111156109de57604051632cd44ac360e21b815260040160405180910390fd5b828054828255906000526020600020908101928215612a2a579160200282015b82811115612a2a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906129f5565b50612a36929150612a3a565b5090565b5b80821115612a365760008155600101612a3b565b60005b83811015612a6a578181015183820152602001612a52565b50506000910152565b60008151808452612a8b816020860160208601612a4f565b601f01601f19169290920160200192915050565b602081526000610b046020830184612a73565b600060208284031215612ac457600080fd5b5035919050565b6001600160a01b0381168114610ae257600080fd5b60008060408385031215612af357600080fd5b8235612afe81612acb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b8035612b2d81612acb565b919050565b60006020808385031215612b4557600080fd5b82356001600160401b0380821115612b5c57600080fd5b818501915085601f830112612b7057600080fd5b813581811115612b8257612b82612b0c565b8060051b604051601f19603f83011681018181108582111715612ba757612ba7612b0c565b604052918252848201925083810185019188831115612bc557600080fd5b938501935b82851015612bea57612bdb85612b22565b84529385019392850192612bca565b98975050505050505050565b600080600060608486031215612c0b57600080fd5b8335612c1681612acb565b92506020840135612c2681612acb565b929592945050506040919091013590565b60008060408385031215612c4a57600080fd5b823591506020830135612c5c81612acb565b809150509250929050565b600060208284031215612c7957600080fd5b813560028110610b0457600080fd5b6001600160a01b0391909116815260200190565b600060208284031215612cae57600080fd5b8135610b0481612acb565b600080600080600060a08688031215612cd157600080fd5b853594506020860135612ce381612acb565b93506040860135612cf381612acb565b92506060860135915060808601358015158114612d0f57600080fd5b809150509295509295909350565b60ff60f81b881681526000602060e06020840152612d3e60e084018a612a73565b8381036040850152612d50818a612a73565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015612da457835183529284019291840191600101612d88565b50909c9b505050505050505050505050565b600080600060608486031215612dcb57600080fd5b833592506020840135612ddd81612acb565b91506040840135612ded81612acb565b809150509250925092565b600080600080600080600060e0888a031215612e1357600080fd5b8735612e1e81612acb565b96506020880135612e2e81612acb565b95506040880135945060608801359350608088013560ff81168114612e5257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612e8257600080fd5b8235612e8d81612acb565b91506020830135612c5c81612acb565b6020808252825182820181905260009190848201906040850190845b81811015611fa45783516001600160a01b031683529284019291840191600101612eb9565b600181811c90821680612ef257607f821691505b602082108103612f1257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156109de576109de612f2e565b918252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612fa757600080fd5b5051919050565b808201808211156109de576109de612f2e565b6001600160a01b03831681526040810160028310612fef57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561300e57600080fd5b8151610b0481612acb565b6001600160a01b039390931683526020830191909152604082015260600190565b6000825161304c818460208701612a4f565b702875696e743235362c616464726573732960781b920191825250601101919050565b60008251613081818460208701612a4f565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806130db57634e487b7160e01b600052601260045260246000fd5b8060ff8416069150509291505056feacffcc86834d0f1a64b0d5a675798deed6ff0bcfc2231edd3480e7288dba7ff497667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a2646970667358221220e57e9a327d43bc8df64b89b42360e97a300927c675babc36c3a6f372596c504c64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106102745760003560e01c806301e1d1141461028057806306fdde03146102a857806307a2d13a146102ca57806307bd0265146102ea578063095ea7b31461031e5780630a28a4771461034e5780630fa275391461036e57806318160ddd146103905780631b98f6ac146103a557806323b872dd146103c55780632f2ff15d146103e5578063301c7e5d14610405578063313ce567146104255780633644e5151461046357806338d52e0f14610478578063402d267d1461049a578063447cb896146104ba578063495ef705146104da5780634cdad506146102ca5780635ac86ab7146104f0578063609da8971461051057806361d027b3146105315780636e553f651461055157806370a082311461057157806371e114301461059157806375b238fc146105b15780637abac329146105c65780637ecebe00146105e657806384b0196e14610606578063852972791461062e578063897b06371461064e57806391d148541461066e57806394bf804d1461068e57806395d89b41146106ae57806397f75dd9146106c35780639b2cb5d8146106e3578063a9059cbb146106f9578063b3d7f6b914610719578063b460af9414610739578063ba08765214610759578063bdacb30314610779578063c63d75b61461049a578063c6e6f59214610799578063ce96cb77146107b9578063d33219b4146107d9578063d505accf146107f9578063d547741f14610819578063d905777e14610839578063d9ab2c5c14610859578063dd62ed3e1461088c578063edc922a9146108ac578063edf07f15146108ce578063ef8b30f714610799578063f0f44260146108ee578063f5b541a61461090e57600080fd5b3661027b57005b600080fd5b34801561028c57600080fd5b50610295610930565b6040519081526020015b60405180910390f35b3480156102b457600080fd5b506102bd61093f565b60405161029f9190612a9f565b3480156102d657600080fd5b506102956102e5366004612ab2565b6109d1565b3480156102f657600080fd5b506102957fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b34801561032a57600080fd5b5061033e610339366004612ae0565b6109e4565b604051901515815260200161029f565b34801561035a57600080fd5b50610295610369366004612ab2565b6109fc565b34801561037a57600080fd5b5061038e610389366004612ab2565b610a09565b005b34801561039c57600080fd5b50600254610295565b3480156103b157600080fd5b5061038e6103c0366004612b32565b610aae565b3480156103d157600080fd5b5061033e6103e0366004612bf6565b610ae5565b3480156103f157600080fd5b5061038e610400366004612c37565b610b0b565b34801561041157600080fd5b5061038e610420366004612c67565b610b41565b34801561043157600080fd5b5060405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161029f565b34801561046f57600080fd5b50610295610b72565b34801561048457600080fd5b5061048d610b7c565b60405161029f9190612c88565b3480156104a657600080fd5b506102956104b5366004612c9c565b610ba0565b3480156104c657600080fd5b5061038e6104d5366004612ab2565b610bc2565b3480156104e657600080fd5b50610295600d5481565b3480156104fc57600080fd5b5061033e61050b366004612c67565b610bf3565b34801561051c57600080fd5b50600f5461033e90600160a01b900460ff1681565b34801561053d57600080fd5b50600f5461048d906001600160a01b031681565b34801561055d57600080fd5b5061029561056c366004612c37565b610c36565b34801561057d57600080fd5b5061029561058c366004612c9c565b610c5b565b34801561059d57600080fd5b5061038e6105ac366004612c9c565b610c76565b3480156105bd57600080fd5b50610295600081565b3480156105d257600080fd5b5061033e6105e1366004612cb9565b610ca7565b3480156105f257600080fd5b50610295610601366004612c9c565b610e5f565b34801561061257600080fd5b5061061b610e7d565b60405161029f9796959493929190612d1d565b34801561063a57600080fd5b50610295610649366004612c9c565b610ec3565b34801561065a57600080fd5b5061038e610669366004612ab2565b610ed1565b34801561067a57600080fd5b5061033e610689366004612c37565b610f02565b34801561069a57600080fd5b506102956106a9366004612c37565b610f2d565b3480156106ba57600080fd5b506102bd610f52565b3480156106cf57600080fd5b50600b5461048d906001600160a01b031681565b3480156106ef57600080fd5b50610295600c5481565b34801561070557600080fd5b5061033e610714366004612ae0565b610f61565b34801561072557600080fd5b50610295610734366004612ab2565b610f6f565b34801561074557600080fd5b50610295610754366004612db6565b610f7c565b34801561076557600080fd5b50610295610774366004612db6565b610fb5565b34801561078557600080fd5b5061038e610794366004612c9c565b610fee565b3480156107a557600080fd5b506102956107b4366004612ab2565b611022565b3480156107c557600080fd5b506102956107d4366004612c9c565b61102f565b3480156107e557600080fd5b50600e5461048d906001600160a01b031681565b34801561080557600080fd5b5061038e610814366004612df8565b611054565b34801561082557600080fd5b5061038e610834366004612c37565b611184565b34801561084557600080fd5b50610295610854366004612c9c565b6111b6565b34801561086557600080fd5b506102957e9ab23a1010d07a0450a1fbea1d84169b57d2c2273b54bff0f20c3e90199b5d81565b34801561089857600080fd5b506102956108a7366004612e6f565b6111d8565b3480156108b857600080fd5b506108c1611203565b60405161029f9190612e9d565b3480156108da57600080fd5b5061038e6108e9366004612c67565b611264565b3480156108fa57600080fd5b5061038e610909366004612c9c565b611295565b34801561091a57600080fd5b5061029560008051602061310b83398151915281565b600061093a6112c6565b905090565b60606003805461094e90612ede565b80601f016020809104026020016040519081016040528092919081815260200182805461097a90612ede565b80156109c75780601f1061099c576101008083540402835291602001916109c7565b820191906000526020600020905b8154815290600101906020018083116109aa57829003601f168201915b5050505050905090565b60006109de826000611383565b92915050565b6000336109f28185856113ba565b5060019392505050565b60006109de8260016113cc565b600f54600160a01b900460ff1615610a3457604051632b2cba5d60e01b815260040160405180910390fd5b600c54811015610a57576040516309bb724360e21b815260040160405180910390fd5b610a6160006113fe565b610a6d3330838461148e565b600f805460ff60a01b1916600160a01b17905560405133907fb1fa1aae20fc88a51add616c46f8bc3a8d65d75b8fbe30fb0a6a2df2e773632290600090a250565b600e546001600160a01b03163314610ad95760405163084312d160e41b815260040160405180910390fd5b610ae281611555565b50565b600033610af38582856116df565b610afe858585611732565b60019150505b9392505050565b610b16600033610f02565b610b3357604051633dcaff7960e21b815260040160405180910390fd5b610b3d8282611791565b5050565b610b4c600033610f02565b610b6957604051633dcaff7960e21b815260040160405180910390fd5b610ae2816113fe565b600061093a611817565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000610bac6000610bf3565b15610bb957506000919050565b50600019919050565b610bcd600033610f02565b610bea57604051633dcaff7960e21b815260040160405180910390fd5b610ae281611942565b600060096000836001811115610c0b57610c0b612f18565b6001811115610c1c57610c1c612f18565b815260208101919091526040016000205460ff1692915050565b600080610c4284611022565b9050610c4f83858361199f565b610b043384868461148e565b6001600160a01b031660009081526020819052604090205490565b610c81600033610f02565b610c9e57604051633dcaff7960e21b815260040160405180910390fd5b610ae281611a1d565b6000610cc160008051602061310b83398151915233610f02565b610cde57604051635be2897760e11b815260040160405180910390fd5b610ce785611a8e565b1580610cf95750610cf784611a8e565b155b15610d17576040516301d9c4ab60e21b815260040160405180910390fd5b610d218387611ae8565b610d4c8660405180604001604052806008815260200167776974686472617760c01b81525087611b28565b610d7f610d598488612f44565b6040518060400160405280600781526020016619195c1bdcda5d60ca1b81525086611b28565b8215610df457600f546001600160a01b0390811690610dc1907f0000000000000000000000000000000000000000000000000000000000000000168286611bbe565b806001600160a01b03166000805160206130eb8339815191528886604051610dea929190612f57565b60405180910390a2505b8115610e0357610e0384611a1d565b6001600160a01b038085169086167f086c47503692f7dac9bd7ce63f1c29c814ce3ae59ee29390e242340d6dd8d58f88610e3d8782612f44565b604051610e4b929190612f57565b60405180910390a350600195945050505050565b6001600160a01b0381166000908152600760205260408120546109de565b600060608060008060006060610e91611c16565b610e99611c43565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006109de6102e583610c5b565b610edc600033610f02565b610ef957604051633dcaff7960e21b815260040160405180910390fd5b610ae281611c70565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080610f3984610f6f565b9050610f4683828661199f565b610b043384838761148e565b60606004805461094e90612ede565b6000336109f2818585611732565b60006109de826001611383565b600080610f88856109fc565b9050600080610f9a8784338989611ca5565b91509150610fab3387878585611d78565b9695505050505050565b600080610fc1856109d1565b9050600080610fd38388338989611ca5565b91509150610fe43387878585611d78565b5095945050505050565b600e546001600160a01b031633146110195760405163084312d160e41b815260040160405180910390fd5b610ae281611ee4565b60006109de8260006113cc565b600061103b6001610bf3565b1561104857506000919050565b6109de6102e583610c5b565b8342111561107d5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886110ca8c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061112582611f55565b9050600061113582878787611f82565b9050896001600160a01b0316816001600160a01b03161461116d57808a6040516325c0072360e11b8152600401611074929190612f65565b6111788a8a8a6113ba565b50505050505050505050565b61118f600033610f02565b6111ac57604051633dcaff7960e21b815260040160405180910390fd5b610b3d8282611fb0565b60006111c26001610bf3565b156111cf57506000919050565b6109de82610c5b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600a8054806020026020016040519081016040528092919081815260200182805480156109c757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161123d575050505050905090565b61126f600033610f02565b61128c57604051633dcaff7960e21b815260040160405180910390fd5b610ae281612017565b6112a0600033610f02565b6112bd57604051633dcaff7960e21b815260040160405180910390fd5b610ae281612090565b600a546000908190815b8181101561137d57600a81815481106112eb576112eb612f7f565b6000918252602090912001546040516302b844a960e21b81526001600160a01b0390911690630ae112a4906113269030908190600401612f65565b602060405180830381865afa158015611343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113679190612f95565b92506113738385612fae565b93506001016112d0565b50505090565b60008061138f60025490565b905080156113b0576113ab6113a2610930565b85908386612101565b6113b2565b835b949350505050565b6113c7838383600161214e565b505050565b6000806113d860025490565b90508315806113e5575080155b6113b0576113ab816113f5610930565b86919086612101565b8061140881612215565b60006009600084600181111561142057611420612f18565b600181111561143157611431612f18565b81526020810191909152604001600020805460ff19169115159190911790557f4cd3e1443d03aba343c5d882744f8f172c07b495e955ac3defb325cbd73c8550335b83604051611482929190612fc1565b60405180910390a15050565b6114c36001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685308561223b565b60408051808201909152600781526619195c1bdcda5d60ca1b6020820152600b546114f89184916001600160a01b0316611b28565b6115028382612274565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611547929190612f57565b60405180910390a350505050565b60005b81518110156116905760006001600160a01b031682828151811061157e5761157e612f7f565b60200260200101516001600160a01b0316036115ad57604051633335653160e01b815260040160405180910390fd5b6116888282815181106115c2576115c2612f7f565b60200260200101516001600160a01b03166373f64d446115e0610b7c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260006044820152606401602060405180830381865afa158015611631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116559190612ffc565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906000196122aa565b600101611558565b5080516116a490600a9060208401906129d5565b507f5f589bfb97387c6d7ce41557510dba9ca4a577876489cacc87a22a395b8b13ca816040516116d49190612e9d565b60405180910390a150565b60006116eb84846111d8565b9050600019811461172c578181101561171d57828183604051637dc7a0d960e11b815260040161107493929190613019565b61172c8484848403600061214e565b50505050565b6001600160a01b03831661175c576000604051634b637e8f60e11b81526004016110749190612c88565b6001600160a01b03821661178657600060405163ec442f0560e01b81526004016110749190612c88565b6113c783838361233c565b61179b8282610f02565b610b3d5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561187057507f000000000000000000000000000000000000000000000000000000000000000046145b1561189a57507f000000000000000000000000000000000000000000000000000000000000000090565b61093a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b66b1a2bc2ec5000081111561196a5760405163207562d360e21b815260040160405180910390fd5b600d8190556040518181527fd84a6d804e5eabc5849fa0d39e4545509125b95c297e1ec5ed98fad0f66befb8906020016116d4565b60006119aa81612453565b6001600160a01b0384166119d157604051633335653160e01b815260040160405180910390fd5b8215806119dc575081155b156119fa5760405163207562d360e21b815260040160405180910390fd5b600c5483101561172c576040516309bb724360e21b815260040160405180910390fd5b611a2681611a8e565b611a435760405163207562d360e21b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0383161790556040517f34ea2e3abaf449e8227dcf35ffa3aa94f2b89384cdf95fe6fd34dc2aefc59b09906116d4908390612c88565b600a54600090815b81811015611ae157600a8181548110611ab157611ab1612f7f565b6000918252602090912001546001600160a01b0390811690851603611ad95760019250611ae1565b600101611a96565b5050919050565b6000611b05826702c68af0bb140000670de0b6b3a764000061247a565b9050808311156113c7576040516337fa464560e21b815260040160405180910390fd5b600082604051602001611b3b919061303a565b60408051601f1981840301815290829052602482018690523060448301529060640160408051601f198184030181529082905291611b789161306f565b6040519081900390206020820180516001600160e01b03166001600160e01b03199092169190911790529050611bb76001600160a01b03831682612535565b5050505050565b6113c783846001600160a01b031663a9059cbb8585604051602401611be492919061308b565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506125a2565b606061093a7f0000000000000000000000000000000000000000000000000000000000000000600561260a565b606061093a7f0000000000000000000000000000000000000000000000000000000000000000600661260a565b600c8190556040518181527f7a94dccf633222d5f6174016b33ae91ce3449a59c8ac979df57cc84ea1a5b2ef906020016116d4565b6000806001611cb381612453565b6001600160a01b0385161580611cd057506001600160a01b038416155b15611cee57604051633335653160e01b815260040160405180910390fd5b871580611cf9575086155b15611d175760405163207562d360e21b815260040160405180910390fd5b6000611d228561102f565b905080891115611d4157925082611d3a81898b61247a565b9250611d48565b8893508792505b846001600160a01b0316876001600160a01b031614611d6c57611d6c8588856116df565b50509550959350505050565b600d54600090611d92908490670de0b6b3a764000061247a565b90506000611da08285612f44565b9050611dac85846126b5565b604080518082019091526008815267776974686472617760c01b6020820152600b54611de29186916001600160a01b0316611b28565b600f546001600160a01b0390811690611e1e907f0000000000000000000000000000000000000000000000000000000000000000168285611bbe565b611e526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884611bbe565b806001600160a01b03166000805160206130eb8339815191528685604051611e7b929190612f57565b60405180910390a2856001600160a01b0316876001600160a01b0316896001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8588604051611ed2929190612f57565b60405180910390a45050505050505050565b6001600160a01b038116611f0b57604051633335653160e01b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0383169081179091556040517fc046b9e8f0cd9b70a3b838962e9c229277fbb7abee68ea0fad4acf2898ed2ca990600090a250565b60006109de611f62611817565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080611f94888888886126eb565b925092509250611fa482826127b0565b50909695505050505050565b611fba8282610f02565b15610b3d5760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b8061202181612453565b60016009600084600181111561203957612039612f18565b600181111561204a5761204a612f18565b81526020810191909152604001600020805460ff19169115159190911790557f534f879afd40abb4e39f8e1b77a316be4c8e3521d9cf5a3a3db8959d574d455933611473565b6001600160a01b0381166120b757604051633335653160e01b815260040160405180910390fd5b600f80546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b600061213061210f83612869565b801561212b575060008480612126576121266130a4565b868809115b151590565b61213b86868661247a565b6121459190612fae565b95945050505050565b6001600160a01b03841661217857600060405163e602df0560e01b81526004016110749190612c88565b6001600160a01b0383166121a2576000604051634a1406b160e11b81526004016110749190612c88565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561172c57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161154791815260200190565b61221e81610bf3565b610ae2576040516360f8581d60e01b815260040160405180910390fd5b6040516001600160a01b03848116602483015283811660448301526064820183905261172c9186918216906323b872dd90608401611be4565b6001600160a01b03821661229e57600060405163ec442f0560e01b81526004016110749190612c88565b610b3d6000838361233c565b6000836001600160a01b031663095ea7b384846040516024016122ce92919061308b565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505090506123078482612896565b61172c5761233284856001600160a01b031663095ea7b3866000604051602401611be492919061308b565b61172c84826125a2565b6001600160a01b03831661236757806002600082825461235c9190612fae565b909155506123c69050565b6001600160a01b038316600090815260208190526040902054818110156123a75783818360405163391434e360e21b815260040161107493929190613019565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166123e257600280548290039055612401565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161244691815260200190565b60405180910390a3505050565b61245c81610bf3565b15610ae2576040516336a4bf2d60e01b815260040160405180910390fd5b60008383028160001985870982811083820303915050806000036124b1578382816124a7576124a76130a4565b0492505050610b04565b8084116124c8576124c860038515026011186128e0565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6060600080846001600160a01b031684604051612552919061306f565b600060405180830381855af49150503d806000811461258d576040519150601f19603f3d011682016040523d82523d6000602084013e612592565b606091505b50915091506121458583836128f2565b600080602060008451602086016000885af1806125c5576040513d6000823e3d81fd5b50506000513d915081156125dd5780600114156125ea565b6001600160a01b0384163b155b1561172c5783604051635274afe760e01b81526004016110749190612c88565b606060ff83146126245761261d83612945565b90506109de565b81805461263090612ede565b80601f016020809104026020016040519081016040528092919081815260200182805461265c90612ede565b80156126a95780601f1061267e576101008083540402835291602001916126a9565b820191906000526020600020905b81548152906001019060200180831161268c57829003601f168201915b505050505090506109de565b6001600160a01b0382166126df576000604051634b637e8f60e11b81526004016110749190612c88565b610b3d8260008361233c565b600080806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0384111561271c57506000915060039050826127a6565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612770573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661279c575060009250600191508290506127a6565b9250600091508190505b9450945094915050565b60008260038111156127c4576127c4612f18565b036127cd575050565b60018260038111156127e1576127e1612f18565b036127ff5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561281357612813612f18565b036128345760405163fce698f760e01b815260048101829052602401611074565b600382600381111561284857612848612f18565b03610b3d576040516335e2f38360e21b815260048101829052602401611074565b6000600282600381111561287f5761287f612f18565b61288991906130ba565b60ff166001149050919050565b6000806000806020600086516020880160008a5af192503d91506000519050828015610fab575081156128cc5780600114610fab565b50505050506001600160a01b03163b151590565b634e487b71600052806020526024601cfd5b6060826129075761290282612984565b610b04565b815115801561291e57506001600160a01b0384163b155b1561293e5783604051639996b31560e01b81526004016110749190612c88565b5080610b04565b60606000612952836129ad565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b8051156129945780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b600060ff8216601f8111156109de57604051632cd44ac360e21b815260040160405180910390fd5b828054828255906000526020600020908101928215612a2a579160200282015b82811115612a2a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906129f5565b50612a36929150612a3a565b5090565b5b80821115612a365760008155600101612a3b565b60005b83811015612a6a578181015183820152602001612a52565b50506000910152565b60008151808452612a8b816020860160208601612a4f565b601f01601f19169290920160200192915050565b602081526000610b046020830184612a73565b600060208284031215612ac457600080fd5b5035919050565b6001600160a01b0381168114610ae257600080fd5b60008060408385031215612af357600080fd5b8235612afe81612acb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b8035612b2d81612acb565b919050565b60006020808385031215612b4557600080fd5b82356001600160401b0380821115612b5c57600080fd5b818501915085601f830112612b7057600080fd5b813581811115612b8257612b82612b0c565b8060051b604051601f19603f83011681018181108582111715612ba757612ba7612b0c565b604052918252848201925083810185019188831115612bc557600080fd5b938501935b82851015612bea57612bdb85612b22565b84529385019392850192612bca565b98975050505050505050565b600080600060608486031215612c0b57600080fd5b8335612c1681612acb565b92506020840135612c2681612acb565b929592945050506040919091013590565b60008060408385031215612c4a57600080fd5b823591506020830135612c5c81612acb565b809150509250929050565b600060208284031215612c7957600080fd5b813560028110610b0457600080fd5b6001600160a01b0391909116815260200190565b600060208284031215612cae57600080fd5b8135610b0481612acb565b600080600080600060a08688031215612cd157600080fd5b853594506020860135612ce381612acb565b93506040860135612cf381612acb565b92506060860135915060808601358015158114612d0f57600080fd5b809150509295509295909350565b60ff60f81b881681526000602060e06020840152612d3e60e084018a612a73565b8381036040850152612d50818a612a73565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015612da457835183529284019291840191600101612d88565b50909c9b505050505050505050505050565b600080600060608486031215612dcb57600080fd5b833592506020840135612ddd81612acb565b91506040840135612ded81612acb565b809150509250925092565b600080600080600080600060e0888a031215612e1357600080fd5b8735612e1e81612acb565b96506020880135612e2e81612acb565b95506040880135945060608801359350608088013560ff81168114612e5257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612e8257600080fd5b8235612e8d81612acb565b91506020830135612c5c81612acb565b6020808252825182820181905260009190848201906040850190845b81811015611fa45783516001600160a01b031683529284019291840191600101612eb9565b600181811c90821680612ef257607f821691505b602082108103612f1257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156109de576109de612f2e565b918252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612fa757600080fd5b5051919050565b808201808211156109de576109de612f2e565b6001600160a01b03831681526040810160028310612fef57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b60006020828403121561300e57600080fd5b8151610b0481612acb565b6001600160a01b039390931683526020830191909152604082015260600190565b6000825161304c818460208701612a4f565b702875696e743235362c616464726573732960781b920191825250601101919050565b60008251613081818460208701612a4f565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806130db57634e487b7160e01b600052601260045260246000fd5b8060ff8416069150509291505056feacffcc86834d0f1a64b0d5a675798deed6ff0bcfc2231edd3480e7288dba7ff497667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a2646970667358221220e57e9a327d43bc8df64b89b42360e97a300927c675babc36c3a6f372596c504c64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessManager__CallerIsNotAdmin()": [
        {
          "details": "Errors"
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC2612ExpiredSignature(uint256)": [
        {
          "details": "Permit deadline has expired."
        }
      ],
      "ERC2612InvalidSigner(address,address)": [
        {
          "details": "Mismatched signature."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidAccountNonce(address,uint256)": [
        {
          "details": "The nonce used for an `account` is not the expected current nonce."
        }
      ],
      "PausableActions__ActionPaused()": [
        {
          "details": "Errors"
        }
      ],
      "Rebalancer__InvalidProvider()": [
        {
          "details": "Errors"
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "Vault__Unauthorized()": [
        {
          "details": "Errors"
        }
      ]
    },
    "events": {
      "ActiveProviderUpdated(address)": {
        "params": {
          "activeProvider": "The new active provider."
        }
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "DistributorUpdated(address)": {
        "params": {
          "rewardsDistributor": "The new rewards distributor contract address."
        }
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "FeeCharged(address,uint256,uint256)": {
        "params": {
          "assets": "The total amount from which the fee is charged.",
          "fee": "The amount charged.",
          "treasury": "The treasury address of the vault."
        }
      },
      "MinAmountUpdated(uint256)": {
        "params": {
          "minAmount": "The new minimum amount."
        }
      },
      "Paused(address,uint8)": {
        "details": "Emitted when the pause is triggered by `account` for a specific `action`."
      },
      "ProvidersUpdated(address[])": {
        "params": {
          "providers": "The new array of providers."
        }
      },
      "RebalanceExecuted(uint256,uint256,address,address)": {
        "params": {
          "assetsFrom": "The amount of assets rebalanced from.",
          "assetsTo": "The amount of assets rebalanced to.",
          "from": "The provider from which assets are rebalanced.",
          "to": "The provider to which assets are rebalanced."
        }
      },
      "RewardsTransferred(address,uint256)": {
        "params": {
          "amount": "The amount of rewards transferred.",
          "to": "The address to which rewards are transferred."
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`."
      },
      "SetupCompleted(address)": {
        "params": {
          "setupAddress": "The address that performed the vault setup."
        }
      },
      "TimelockUpdated(address)": {
        "params": {
          "timelock": "The new timelock contract address."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "TreasuryUpdated(address)": {
        "params": {
          "treasury": "The new treasury address."
        }
      },
      "Unpaused(address,uint8)": {
        "details": "Emitted when the pause is lifted by `account` for a specific `action`."
      },
      "WithdrawFeePercentUpdated(uint256)": {
        "params": {
          "withdrawFeePercent": "The new withdrawal fee percentage."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Initializes the Rebalancer contract with the specified parameters.",
        "params": {
          "asset_": "The address of the underlying asset managed by the vault.",
          "name_": "The name of the tokenized vault.",
          "providers_": "An array of providers serving as a liquidity source for lending and/or yield.",
          "symbol_": "The symbol of the tokenized vault.",
          "timelock_": "The address of the timelock contract.",
          "treasury_": "The address of the treasury.",
          "withdrawFeePercent_": "The fee percentage applied to withdrawals."
        }
      },
      "convertToAssets(uint256)": {
        "details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "convertToShares(uint256)": {
        "details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "deposit(uint256,address)": {
        "details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getBalanceOfAsset(address)": {
        "params": {
          "owner": "The address of the account whose asset balance is checked."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have the admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxDeposit(address)": {
        "details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
      },
      "maxMint(address)": {
        "details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
      },
      "maxRedeem(address)": {
        "details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
      },
      "maxWithdraw(address)": {
        "details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
      },
      "mint(uint256,address)": {
        "details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
      },
      "pause(uint8)": {
        "params": {
          "action": "The action to pause."
        }
      },
      "paused(uint8)": {
        "details": "Returns true if the specified `action` is paused, and false otherwise."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
      },
      "previewDeposit(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewMint(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
      },
      "previewRedeem(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
      },
      "previewWithdraw(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "rebalance(uint256,address,address,uint256,bool)": {
        "params": {
          "activateToProvider": "A flag indicating whether to mark the receiving provider as active.",
          "assets": "The amount of assets to be rebalanced.",
          "fee": "The fee amount charged for the rebalancing.",
          "from": "The provider currently holding the assets.",
          "to": "The provider receiving the assets."
        }
      },
      "redeem(uint256,address,address)": {
        "details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have the admin role. May emit a {RoleRevoked} event."
      },
      "setActiveProvider(address)": {
        "params": {
          "_activeProvider": "The contract of the new active provider."
        }
      },
      "setMinAmount(uint256)": {
        "params": {
          "_minAmount": "The new minimum amount."
        }
      },
      "setProviders(address[])": {
        "params": {
          "providers": "An array of provider contracts."
        }
      },
      "setTimelock(address)": {
        "params": {
          "_timelock": "The address of the new timelock contract."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "The new treasury address."
        }
      },
      "setWithdrawFeePercent(uint256)": {
        "params": {
          "_withdrawFeePercent": "The new withdrawal fee percentage."
        }
      },
      "setupVault(uint256)": {
        "details": "Refer to: https://rokinot.github.io/hatsfinance",
        "params": {
          "assets": "The amount used to set up the vault."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "unpause(uint8)": {
        "params": {
          "action": "The action to unpause."
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      }
    },
    "title": "Rebalancer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActiveProviderUpdated(address)": {
        "notice": "Emitted when the active provider is changed."
      },
      "DistributorUpdated(address)": {
        "notice": "Emitted when the rewards distributor contract is changed."
      },
      "FeeCharged(address,uint256,uint256)": {
        "notice": "Emitted when a fee is charged."
      },
      "MinAmountUpdated(uint256)": {
        "notice": "Emitted when the minimum amount is changed."
      },
      "ProvidersUpdated(address[])": {
        "notice": "Emitted when the available providers for the vault change."
      },
      "RebalanceExecuted(uint256,uint256,address,address)": {
        "notice": "Emitted when the vault is rebalanced."
      },
      "RewardsTransferred(address,uint256)": {
        "notice": "Emitted when rewards are transferred."
      },
      "SetupCompleted(address)": {
        "notice": "Emitted when the vault setup is completed."
      },
      "TimelockUpdated(address)": {
        "notice": "Emitted when the timelock contract is changed."
      },
      "TreasuryUpdated(address)": {
        "notice": "Emitted when the treasury address is changed."
      },
      "WithdrawFeePercentUpdated(uint256)": {
        "notice": "Emitted when the withdrawal fee percentage is changed."
      }
    },
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Returns the number of decimals used to get number representation."
      },
      "getBalanceOfAsset(address)": {
        "notice": "Returns the amount of assets owned by the specified address."
      },
      "getProviders()": {
        "notice": "Returns the array of providers of this vault."
      },
      "pause(uint8)": {
        "notice": "Pauses the specified action in the vault."
      },
      "rebalance(uint256,address,address,uint256,bool)": {
        "notice": "Performs rebalancing of the vault by moving funds across providers."
      },
      "setActiveProvider(address)": {
        "notice": "Sets the active provider for this vault."
      },
      "setMinAmount(uint256)": {
        "notice": "Sets the minimum amount required for deposit and mint actions."
      },
      "setProviders(address[])": {
        "notice": "Sets the list of providers for this vault."
      },
      "setTimelock(address)": {
        "notice": "Sets the address of the timelock contract."
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury address for this vault."
      },
      "setWithdrawFeePercent(uint256)": {
        "notice": "Sets the withdrawal fee percentage for this vault."
      },
      "setupVault(uint256)": {
        "notice": "Sets up the vault with a specified amount of assets to prevent inflation attacks."
      },
      "unpause(uint8)": {
        "notice": "Unpauses the specified action in the vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 678,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 684,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 686,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 688,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 690,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3469,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 3471,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2200,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9559,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_roles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9801,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_actionPaused",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_enum(Actions)9796,t_bool)"
      },
      {
        "astId": 10011,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "_providers",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_contract(IProvider)11390)dyn_storage"
      },
      {
        "astId": 10014,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "activeProvider",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IProvider)11390"
      },
      {
        "astId": 10016,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "minAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10018,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "withdrawFeePercent",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10020,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "timelock",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10022,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "treasury",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10024,
        "contract": "contracts/Rebalancer.sol:Rebalancer",
        "label": "setupCompleted",
        "offset": 20,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IProvider)11390)dyn_storage": {
        "base": "t_contract(IProvider)11390",
        "encoding": "dynamic_array",
        "label": "contract IProvider[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProvider)11390": {
        "encoding": "inplace",
        "label": "contract IProvider",
        "numberOfBytes": "20"
      },
      "t_enum(Actions)9796": {
        "encoding": "inplace",
        "label": "enum PausableActions.Actions",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(Actions)9796,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(Actions)9796",
        "label": "mapping(enum PausableActions.Actions => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}