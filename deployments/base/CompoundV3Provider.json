{
  "address": "0x99e3ACb87d82EF5c8370388D9b043b25B042d794",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "providerManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CompoundV3Provider__AddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProviderManager",
      "outputs": [
        {
          "internalType": "contract IProviderManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39b58cdfcd7a421f3a4e82b66f5a8977795b5cd599ca9b6ce4542bd8abf12f4b",
  "receipt": {
    "to": null,
    "from": "0xafA9ed53c33bbD8DE300481ce150dB3D35738F9D",
    "contractAddress": "0x99e3ACb87d82EF5c8370388D9b043b25B042d794",
    "transactionIndex": 25,
    "gasUsed": "511872",
    "logsBloom": "0x
    "blockHash": "0x152b0ed9415801d1825a6cae82a6f5c62f2f0ec3f767c711cad22d2ccf211f89",
    "transactionHash": "0x39b58cdfcd7a421f3a4e82b66f5a8977795b5cd599ca9b6ce4542bd8abf12f4b",
    "logs": [],
    "blockNumber": 35881809,
    "cumulativeGasUsed": "3011067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBFf2d08940230126D8deF76551CfD5BAc9722cF7"
  ],
  "numDeployments": 1,
  "solcInputHash": "402cb3de3f658f03fad921359dbde991",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"providerManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CompoundV3Provider__AddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviderManager\",\"outputs\":[{\"internalType\":\"contract IProviderManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CompoundV3Provider__AddressZero()\":[{\"details\":\"Errors\"}]},\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to deposit.\",\"vault\":\"The vault calling this function.\"}},\"getDepositBalance(address,address)\":{\"params\":{\"user\":\"The address of the user whose balance is needed.\",\"vault\":\"The vault required by specific providers with multi-markets; otherwise, pass address(0).\"}},\"getDepositRate(address)\":{\"details\":\"Must return the rate in ray units (1e27).\",\"params\":{\"vault\":\"The vault required by specific provider with multi-markets; otherwise, pass address(0).\"}},\"getSource(address,address,address)\":{\"details\":\"Some provider implementations may not require all keys.\",\"params\":{\"keyOne\":\"The first key for identification\",\"keyThree\":\"The third key for identification\",\"keyTwo\":\"The second key for identification\"}},\"withdraw(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to withdraw.\",\"vault\":\"The vault calling this function.\"}}},\"title\":\"CompoundV3Provider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,address)\":{\"notice\":\"Performs a deposit at the provider on behalf of a vault.\"},\"getDepositBalance(address,address)\":{\"notice\":\"Returns the deposit balance of a user at the provider.\"},\"getDepositRate(address)\":{\"notice\":\"Returns the latest supply annual percentage rate (APR) at the provider.\"},\"getIdentifier()\":{\"notice\":\"Returns the identifier of the provider.\"},\"getProviderManager()\":{\"notice\":\"Returns the ProviderManager contract applicable to this provider.\"},\"getSource(address,address,address)\":{\"notice\":\"Returns the source address that requires ERC20 approval for vault actions.\"},\"withdraw(uint256,address)\":{\"notice\":\"Performs a withdraw at the provider on behalf of a vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/providers/CompoundV3Provider.sol\":\"CompoundV3Provider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x666c704c58d4cf404eecd6e4a898a87e25b00b45416678de914e160582c3ff17\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"contracts/interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title IProvider\\n */\\ninterface IProvider {\\n    /**\\n     * @notice Returns the identifier of the provider.\\n     */\\n    function getIdentifier() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the source address that requires ERC20 approval for vault actions.\\n     *\\n     * @param keyOne The first key for identification\\n     * @param keyTwo The second key for identification\\n     * @param keyThree The third key for identification\\n     *\\n     * @dev Some provider implementations may not require all keys.\\n     */\\n    function getSource(\\n        address keyOne,\\n        address keyTwo,\\n        address keyThree\\n    ) external view returns (address source);\\n\\n    /**\\n     * @notice Performs a deposit at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to deposit.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Performs a withdraw at the provider on behalf of a vault.\\n     *\\n     * @param amount The amount to withdraw.\\n     * @param vault The vault calling this function.\\n     *\\n     * @dev This function should be delegate called in the context of a vault.\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Returns the deposit balance of a user at the provider.\\n     *\\n     * @param user The address of the user whose balance is needed.\\n     * @param vault The vault required by specific providers with multi-markets; otherwise, pass address(0).\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Returns the latest supply annual percentage rate (APR) at the provider.\\n     *\\n     * @param vault The vault required by specific provider with multi-markets; otherwise, pass address(0).\\n     *\\n     * @dev Must return the rate in ray units (1e27).\\n     */\\n    function getDepositRate(IVault vault) external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IProviderManager\\n */\\ninterface IProviderManager {\\n    /**\\n     * @dev Emitted when the yield token is set for an asset.\\n     * @param identifier The identifier of the provider.\\n     * @param asset The address of the asset.\\n     * @param yieldToken The address of the corresponding yield token.\\n     */\\n    event YieldTokenUpdated(\\n        string identifier,\\n        address indexed asset,\\n        address yieldToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the market is set for two assets.\\n     * @param identifier The identifier of the provider.\\n     * @param assetOne The address of the first asset.\\n     * @param assetTwo The address of the second asset.\\n     * @param market The address of the corresponding market.\\n     */\\n    event MarketUpdated(\\n        string identifier,\\n        address indexed assetOne,\\n        address indexed assetTwo,\\n        address market\\n    );\\n\\n    /**\\n     * @notice Returns the yield token for a given asset and provider identifier.\\n     * @param identifier The identifier of the provider.\\n     * @param asset The address of the asset.\\n     */\\n    function getYieldToken(\\n        string memory identifier,\\n        address asset\\n    ) external view returns (address yieldToken);\\n\\n    /**\\n     * @notice Returns the market for two assets and a provider identifier.\\n     * @param identifier The identifier of the provider.\\n     * @param assetOne The address of the first asset.\\n     * @param assetTwo The address of the second asset.\\n     */\\n    function getMarket(\\n        string memory identifier,\\n        address assetOne,\\n        address assetTwo\\n    ) external view returns (address market);\\n\\n    /**\\n     * @notice Sets the yield token for a given asset and provider identifier.\\n     * @param identifier The identifier of the provider.\\n     * @param asset The address of the asset.\\n     * @param yieldToken The address of the corresponding yield token.\\n     */\\n    function setYieldToken(\\n        string memory identifier,\\n        address asset,\\n        address yieldToken\\n    ) external;\\n\\n    /**\\n     * @notice Sets the market for two assets and a provider identifier.\\n     * @param identifier The identifier of the provider.\\n     * @param assetOne The address of the first asset.\\n     * @param assetTwo The address of the second asset.\\n     * @param market The address of the corresponding market.\\n     */\\n    function setMarket(\\n        string memory identifier,\\n        address assetOne,\\n        address assetTwo,\\n        address market\\n    ) external;\\n}\\n\",\"keccak256\":\"0x84c85d32f1eab7e217a44998dcdb80194bce33568ad4d32be32a91f37f08c18f\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IProvider} from \\\"./IProvider.sol\\\";\\n\\n/**\\n * @title IVault\\n */\\ninterface IVault is IERC4626 {\\n    /**\\n     * @notice Emitted when the vault setup is completed.\\n     *\\n     * @param setupAddress The address that performed the vault setup.\\n     */\\n    event SetupCompleted(address indexed setupAddress);\\n\\n    /**\\n     * @notice Emitted when the timelock contract is changed.\\n     *\\n     * @param timelock The new timelock contract address.\\n     */\\n    event TimelockUpdated(address indexed timelock);\\n\\n    /**\\n     * @notice Emitted when the available providers for the vault change.\\n     *\\n     * @param providers The new array of providers.\\n     */\\n    event ProvidersUpdated(IProvider[] providers);\\n\\n    /**\\n     * @notice Emitted when the active provider is changed.\\n     *\\n     * @param activeProvider The new active provider.\\n     */\\n    event ActiveProviderUpdated(IProvider activeProvider);\\n\\n    /**\\n     * @notice Emitted when the treasury address is changed.\\n     *\\n     * @param treasury The new treasury address.\\n     */\\n    event TreasuryUpdated(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the withdrawal fee percentage is changed.\\n     *\\n     * @param withdrawFeePercent The new withdrawal fee percentage.\\n     */\\n    event WithdrawFeePercentUpdated(uint256 withdrawFeePercent);\\n\\n    /**\\n     * @notice Emitted when the minimum amount is changed.\\n     *\\n     * @param minAmount The new minimum amount.\\n     */\\n    event MinAmountUpdated(uint256 minAmount);\\n\\n    /**\\n     * @notice Emitted when a fee is charged.\\n     *\\n     * @param treasury The treasury address of the vault.\\n     * @param assets The total amount from which the fee is charged.\\n     * @param fee The amount charged.\\n     */\\n    event FeeCharged(address indexed treasury, uint256 assets, uint256 fee);\\n\\n    /**\\n     * @notice Emitted when the vault is rebalanced.\\n     *\\n     * @param assetsFrom The amount of assets rebalanced from.\\n     * @param assetsTo The amount of assets rebalanced to.\\n     * @param from The provider from which assets are rebalanced.\\n     * @param to The provider to which assets are rebalanced.\\n     */\\n    event RebalanceExecuted(\\n        uint256 assetsFrom,\\n        uint256 assetsTo,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    /**\\n     * @notice Emitted when rewards are transferred.\\n     *\\n     * @param to The address to which rewards are transferred.\\n     * @param amount The amount of rewards transferred.\\n     */\\n    event RewardsTransferred(address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the rewards distributor contract is changed.\\n     *\\n     * @param rewardsDistributor The new rewards distributor contract address.\\n     */\\n    event DistributorUpdated(address indexed rewardsDistributor);\\n\\n    /**\\n     * @notice Sets up the vault with a specified amount of assets to prevent inflation attacks.\\n     * @dev Refer to: https://rokinot.github.io/hatsfinance\\n     *\\n     * @param assets The amount used to set up the vault.\\n     */\\n    function setupVault(uint256 assets) external;\\n\\n    /**\\n     * @notice Performs rebalancing of the vault by moving funds across providers.\\n     * @param assets The amount of assets to be rebalanced.\\n     * @param from The provider currently holding the assets.\\n     * @param to The provider receiving the assets.\\n     * @param fee The fee amount charged for the rebalancing.\\n     * @param activateToProvider A flag indicating whether to mark the receiving provider as active.\\n     */\\n    function rebalance(\\n        uint256 assets,\\n        IProvider from,\\n        IProvider to,\\n        uint256 fee,\\n        bool activateToProvider\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4\",\"license\":\"MIT\"},\"contracts/interfaces/compoundV3/CometInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.23;\\n\\n/**\\n * @title Compound's Comet Interface\\n * @notice An efficient monolithic money market protocol\\n * @author Compound\\n * @dev Modified version of the original Compound interface.\\n */\\ninterface CometInterface {\\n    struct AssetInfo {\\n        uint8 offset;\\n        address asset;\\n        address priceFeed;\\n        uint64 scale;\\n        uint64 borrowCollateralFactor;\\n        uint64 liquidateCollateralFactor;\\n        uint64 liquidationFactor;\\n        uint128 supplyCap;\\n    }\\n\\n    // 512 bits total = 2 slots\\n    struct TotalsBasic {\\n        // 1st slot\\n        uint64 baseSupplyIndex;\\n        uint64 baseBorrowIndex;\\n        uint64 trackingSupplyIndex;\\n        uint64 trackingBorrowIndex;\\n        // 2nd slot\\n        uint104 totalSupplyBase;\\n        uint104 totalBorrowBase;\\n        uint40 lastAccrualTime;\\n        uint8 pauseFlags;\\n    }\\n\\n    function supply(address asset, uint256 amount) external;\\n\\n    function supplyTo(address dst, address asset, uint256 amount) external;\\n\\n    function supplyFrom(\\n        address from,\\n        address dst,\\n        address asset,\\n        uint256 amount\\n    ) external;\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferAsset(address dst, address asset, uint256 amount) external;\\n\\n    function transferAssetFrom(\\n        address src,\\n        address dst,\\n        address asset,\\n        uint256 amount\\n    ) external;\\n\\n    function withdraw(address asset, uint256 amount) external;\\n\\n    function withdrawTo(address to, address asset, uint256 amount) external;\\n\\n    function withdrawFrom(\\n        address src,\\n        address to,\\n        address asset,\\n        uint256 amount\\n    ) external;\\n\\n    function approveThis(\\n        address manager,\\n        address asset,\\n        uint256 amount\\n    ) external;\\n\\n    function withdrawReserves(address to, uint256 amount) external;\\n\\n    function absorb(address absorber, address[] calldata accounts) external;\\n\\n    function buyCollateral(\\n        address asset,\\n        uint256 minAmount,\\n        uint256 baseAmount,\\n        address recipient\\n    ) external;\\n\\n    function allow(address manager, bool isAllowed) external;\\n\\n    function allowBySig(\\n        address owner,\\n        address manager,\\n        bool isAllowed,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function quoteCollateral(\\n        address asset,\\n        uint256 baseAmount\\n    ) external view returns (uint256);\\n\\n    function getAssetInfo(uint8 i) external view returns (AssetInfo memory);\\n\\n    function getAssetInfoByAddress(\\n        address asset\\n    ) external view returns (AssetInfo memory);\\n\\n    function getReserves() external view returns (int256);\\n\\n    function getPrice(address priceFeed) external view returns (uint256);\\n\\n    function isBorrowCollateralized(\\n        address account\\n    ) external view returns (bool);\\n\\n    function isLiquidatable(address account) external view returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrow() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function borrowBalanceOf(address account) external view returns (uint256);\\n\\n    function pause(\\n        bool supplyPaused,\\n        bool transferPaused,\\n        bool withdrawPaused,\\n        bool absorbPaused,\\n        bool buyPaused\\n    ) external;\\n\\n    function isSupplyPaused() external view returns (bool);\\n\\n    function isTransferPaused() external view returns (bool);\\n\\n    function isWithdrawPaused() external view returns (bool);\\n\\n    function isAbsorbPaused() external view returns (bool);\\n\\n    function isBuyPaused() external view returns (bool);\\n\\n    function accrueAccount(address account) external;\\n\\n    function getSupplyRate(uint256 utilization) external view returns (uint64);\\n\\n    function getBorrowRate(uint256 utilization) external view returns (uint64);\\n\\n    function getUtilization() external view returns (uint256);\\n\\n    function governor() external view returns (address);\\n\\n    function pauseGuardian() external view returns (address);\\n\\n    function baseToken() external view returns (address);\\n\\n    function baseTokenPriceFeed() external view returns (address);\\n\\n    function extensionDelegate() external view returns (address);\\n\\n    /// @dev uint64\\n    function supplyKink() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateSlopeLow()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateSlopeHigh()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev uint64\\n    function supplyPerSecondInterestRateBase() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function borrowKink() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateSlopeLow()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateSlopeHigh()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev uint64\\n    function borrowPerSecondInterestRateBase() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function storeFrontPriceFactor() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function baseScale() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function trackingIndexScale() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function baseTrackingSupplySpeed() external view returns (uint256);\\n\\n    /// @dev uint64\\n    function baseTrackingBorrowSpeed() external view returns (uint256);\\n\\n    /// @dev uint104\\n    function baseMinForRewards() external view returns (uint256);\\n\\n    /// @dev uint104\\n    function baseBorrowMin() external view returns (uint256);\\n\\n    /// @dev uint104\\n    function targetReserves() external view returns (uint256);\\n\\n    function numAssets() external view returns (uint8);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function collateralBalanceOf(\\n        address account,\\n        address asset\\n    ) external view returns (uint128);\\n\\n    function baseTrackingAccrued(\\n        address account\\n    ) external view returns (uint64);\\n\\n    function baseAccrualScale() external view returns (uint64);\\n\\n    function baseIndexScale() external view returns (uint64);\\n\\n    function factorScale() external view returns (uint64);\\n\\n    function priceScale() external view returns (uint64);\\n\\n    function maxAssets() external view returns (uint8);\\n\\n    function totalsBasic() external view returns (TotalsBasic memory);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbecc401cf90e555509f75fd1bca88b2f7f45742c3e4ee5b0dffcfd3ed50d19a3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/providers/CompoundV3Provider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IProvider} from \\\"../interfaces/IProvider.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {IProviderManager} from \\\"../interfaces/IProviderManager.sol\\\";\\nimport {CometInterface} from \\\"../interfaces/compoundV3/CometInterface.sol\\\";\\n\\n/**\\n * @title CompoundV3Provider\\n */\\ncontract CompoundV3Provider is IProvider {\\n    /**\\n     * @dev Errors\\n     */\\n    error CompoundV3Provider__AddressZero();\\n\\n    IProviderManager private immutable _providerManager;\\n\\n    constructor(address providerManager_) {\\n        if (providerManager_ == address(0)) {\\n            revert CompoundV3Provider__AddressZero();\\n        }\\n        _providerManager = IProviderManager(providerManager_);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function deposit(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success) {\\n        CometInterface comet = _getComet(vault);\\n        comet.supply(vault.asset(), amount);\\n        success = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        IVault vault\\n    ) external returns (bool success) {\\n        CometInterface comet = _getComet(vault);\\n        comet.withdraw(vault.asset(), amount);\\n        success = true;\\n    }\\n\\n    /**\\n     * @dev Returns the Comet contract of Compound V3 for the specified vault.\\n     * @param vault The vault for which to get the Comet contract.\\n     */\\n    function _getComet(IVault vault) internal view returns (CometInterface) {\\n        // From Compound docs: Earn interest by supplying the base asset.\\n        address comet = _providerManager.getYieldToken(\\n            getIdentifier(),\\n            vault.asset()\\n        );\\n        return CometInterface(comet);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositBalance(\\n        address user,\\n        IVault vault\\n    ) external view returns (uint256 balance) {\\n        CometInterface comet = _getComet(vault);\\n        balance = comet.balanceOf(user);\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getDepositRate(IVault vault) external view returns (uint256 rate) {\\n        CometInterface comet = _getComet(vault);\\n        uint256 utilization = comet.getUtilization();\\n        // Scaled by 1e9 to return ray(1e27) per IProvider specs, Compound uses base 1e18 number.\\n        uint256 ratePerSecond = comet.getSupplyRate(utilization) * 10 ** 9;\\n        // 31536000 seconds in a `year` = 60 * 60 * 24 * 365.\\n        rate = ratePerSecond * 31536000;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getSource(\\n        address asset,\\n        address,\\n        address\\n    ) external view returns (address source) {\\n        source = _providerManager.getYieldToken(getIdentifier(), asset);\\n    }\\n\\n    /**\\n     * @notice Returns the ProviderManager contract applicable to this provider.\\n     */\\n    function getProviderManager() public view returns (IProviderManager) {\\n        return _providerManager;\\n    }\\n\\n    /**\\n     * @inheritdoc IProvider\\n     */\\n    function getIdentifier() public pure override returns (string memory) {\\n        return \\\"Compound_V3_Provider\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x007a94e12b565da55477a177565b48e4226f6257c4b5511496fe0e8178e63489\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161090338038061090383398101604081905261002f91610067565b6001600160a01b0381166100565760405163fc67bbbb60e01b815260040160405180910390fd5b6001600160a01b0316608052610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b6080516108436100c0600039600081816101020152818161041801526104df01526108436000f3fe608060405234801561001057600080fd5b506004361061006c5760003560e01c8062f714ce146100715780630ae112a4146100995780634c8f411d146100ba5780636e553f65146100cd57806373f64d44146100e057806381d1f4d414610100578063aa23e03d14610126575b600080fd5b61008461007f3660046105f3565b61013b565b60405190151581526020015b60405180910390f35b6100ac6100a7366004610623565b610224565b604051908152602001610090565b6100ac6100c8366004610651565b6102a8565b6100846100db3660046105f3565b6103b9565b6100f36100ee36600461066e565b610414565b60405161009091906106b9565b7f00000000000000000000000000000000000000000000000000000000000000006100f3565b61012e6104ac565b6040516100909190610713565b600080610147836104da565b9050806001600160a01b031663f3fef3a3846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba9190610726565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801561020257600080fd5b505af1158015610216573d6000803e3d6000fd5b506001979650505050505050565b600080610230836104da565b6040516370a0823160e01b81529091506001600160a01b038216906370a082319061025f9087906004016106b9565b602060405180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610743565b949350505050565b6000806102b4836104da565b90506000816001600160a01b0316637eb711316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610743565b60405163d955759d60e01b8152600481018290529091506000906001600160a01b0384169063d955759d90602401602060405180830381865afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610389919061075c565b61039790633b9aca0061079b565b6001600160401b031690506103b0816301e133806107c6565b95945050505050565b6000806103c5836104da565b9050806001600160a01b031663f2b9fdb8846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610196573d6000803e3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c41adf5061044d6104ac565b866040518363ffffffff1660e01b815260040161046b9291906107e3565b602060405180830381865afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610726565b60408051808201909152601481527321b7b6b837bab7322fab19afa83937bb34b232b960611b602082015290565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c41adf506105146104ac565b856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105769190610726565b6040518363ffffffff1660e01b81526004016105939291906107e3565b602060405180830381865afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190610726565b9392505050565b6001600160a01b03811681146105f057600080fd5b50565b6000806040838503121561060657600080fd5b823591506020830135610618816105db565b809150509250929050565b6000806040838503121561063657600080fd5b8235610641816105db565b91506020830135610618816105db565b60006020828403121561066357600080fd5b81356105d4816105db565b60008060006060848603121561068357600080fd5b833561068e816105db565b9250602084013561069e816105db565b915060408401356106ae816105db565b809150509250925092565b6001600160a01b0391909116815260200190565b6000815180845260005b818110156106f3576020818501810151868301820152016106d7565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006105d460208301846106cd565b60006020828403121561073857600080fd5b81516105d4816105db565b60006020828403121561075557600080fd5b5051919050565b60006020828403121561076e57600080fd5b81516001600160401b03811681146105d457600080fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160280821691908281146107be576107be610785565b505092915050565b80820281158282048414176107dd576107dd610785565b92915050565b6040815260006107f660408301856106cd565b905060018060a01b0383166020830152939250505056fea26469706673582212204dd1ed3c7d7be9f8cfe99b1f1fe1e7cac90f5b2b633084635575554701d4401964736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006c5760003560e01c8062f714ce146100715780630ae112a4146100995780634c8f411d146100ba5780636e553f65146100cd57806373f64d44146100e057806381d1f4d414610100578063aa23e03d14610126575b600080fd5b61008461007f3660046105f3565b61013b565b60405190151581526020015b60405180910390f35b6100ac6100a7366004610623565b610224565b604051908152602001610090565b6100ac6100c8366004610651565b6102a8565b6100846100db3660046105f3565b6103b9565b6100f36100ee36600461066e565b610414565b60405161009091906106b9565b7f00000000000000000000000000000000000000000000000000000000000000006100f3565b61012e6104ac565b6040516100909190610713565b600080610147836104da565b9050806001600160a01b031663f3fef3a3846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba9190610726565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801561020257600080fd5b505af1158015610216573d6000803e3d6000fd5b506001979650505050505050565b600080610230836104da565b6040516370a0823160e01b81529091506001600160a01b038216906370a082319061025f9087906004016106b9565b602060405180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610743565b949350505050565b6000806102b4836104da565b90506000816001600160a01b0316637eb711316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610743565b60405163d955759d60e01b8152600481018290529091506000906001600160a01b0384169063d955759d90602401602060405180830381865afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610389919061075c565b61039790633b9aca0061079b565b6001600160401b031690506103b0816301e133806107c6565b95945050505050565b6000806103c5836104da565b9050806001600160a01b031663f2b9fdb8846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610196573d6000803e3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c41adf5061044d6104ac565b866040518363ffffffff1660e01b815260040161046b9291906107e3565b602060405180830381865afa158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610726565b60408051808201909152601481527321b7b6b837bab7322fab19afa83937bb34b232b960611b602082015290565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c41adf506105146104ac565b856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105769190610726565b6040518363ffffffff1660e01b81526004016105939291906107e3565b602060405180830381865afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190610726565b9392505050565b6001600160a01b03811681146105f057600080fd5b50565b6000806040838503121561060657600080fd5b823591506020830135610618816105db565b809150509250929050565b6000806040838503121561063657600080fd5b8235610641816105db565b91506020830135610618816105db565b60006020828403121561066357600080fd5b81356105d4816105db565b60008060006060848603121561068357600080fd5b833561068e816105db565b9250602084013561069e816105db565b915060408401356106ae816105db565b809150509250925092565b6001600160a01b0391909116815260200190565b6000815180845260005b818110156106f3576020818501810151868301820152016106d7565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006105d460208301846106cd565b60006020828403121561073857600080fd5b81516105d4816105db565b60006020828403121561075557600080fd5b5051919050565b60006020828403121561076e57600080fd5b81516001600160401b03811681146105d457600080fd5b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160280821691908281146107be576107be610785565b505092915050565b80820281158282048414176107dd576107dd610785565b92915050565b6040815260006107f660408301856106cd565b905060018060a01b0383166020830152939250505056fea26469706673582212204dd1ed3c7d7be9f8cfe99b1f1fe1e7cac90f5b2b633084635575554701d4401964736f6c63430008170033",
  "devdoc": {
    "errors": {
      "CompoundV3Provider__AddressZero()": [
        {
          "details": "Errors"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deposit(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to deposit.",
          "vault": "The vault calling this function."
        }
      },
      "getDepositBalance(address,address)": {
        "params": {
          "user": "The address of the user whose balance is needed.",
          "vault": "The vault required by specific providers with multi-markets; otherwise, pass address(0)."
        }
      },
      "getDepositRate(address)": {
        "details": "Must return the rate in ray units (1e27).",
        "params": {
          "vault": "The vault required by specific provider with multi-markets; otherwise, pass address(0)."
        }
      },
      "getSource(address,address,address)": {
        "details": "Some provider implementations may not require all keys.",
        "params": {
          "keyOne": "The first key for identification",
          "keyThree": "The third key for identification",
          "keyTwo": "The second key for identification"
        }
      },
      "withdraw(uint256,address)": {
        "details": "This function should be delegate called in the context of a vault.",
        "params": {
          "amount": "The amount to withdraw.",
          "vault": "The vault calling this function."
        }
      }
    },
    "title": "CompoundV3Provider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,address)": {
        "notice": "Performs a deposit at the provider on behalf of a vault."
      },
      "getDepositBalance(address,address)": {
        "notice": "Returns the deposit balance of a user at the provider."
      },
      "getDepositRate(address)": {
        "notice": "Returns the latest supply annual percentage rate (APR) at the provider."
      },
      "getIdentifier()": {
        "notice": "Returns the identifier of the provider."
      },
      "getProviderManager()": {
        "notice": "Returns the ProviderManager contract applicable to this provider."
      },
      "getSource(address,address,address)": {
        "notice": "Returns the source address that requires ERC20 approval for vault actions."
      },
      "withdraw(uint256,address)": {
        "notice": "Performs a withdraw at the provider on behalf of a vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}