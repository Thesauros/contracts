{"abi":[{"type":"function","name":"deposit","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"vault","type":"address","internalType":"contract IVault"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"getDepositBalance","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"vault","type":"address","internalType":"contract IVault"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getDepositRate","inputs":[{"name":"vault","type":"address","internalType":"contract IVault"}],"outputs":[{"name":"rate","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getIdentifier","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"getSource","inputs":[{"name":"keyOne","type":"address","internalType":"address"},{"name":"keyTwo","type":"address","internalType":"address"},{"name":"keyThree","type":"address","internalType":"address"}],"outputs":[{"name":"source","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"vault","type":"address","internalType":"contract IVault"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deposit(uint256,address)":"6e553f65","getDepositBalance(address,address)":"0ae112a4","getDepositRate(address)":"4c8f411d","getIdentifier()":"aa23e03d","getSource(address,address,address)":"73f64d44","withdraw(uint256,address)":"00f714ce"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyThree\",\"type\":\"address\"}],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to deposit.\",\"vault\":\"The vault calling this function.\"}},\"getDepositBalance(address,address)\":{\"params\":{\"user\":\"The address of the user whose balance is needed.\",\"vault\":\"The vault required by specific providers with multi-markets; otherwise, pass address(0).\"}},\"getDepositRate(address)\":{\"details\":\"Must return the rate in ray units (1e27).\",\"params\":{\"vault\":\"The vault required by specific provider with multi-markets; otherwise, pass address(0).\"}},\"getSource(address,address,address)\":{\"details\":\"Some provider implementations may not require all keys.\",\"params\":{\"keyOne\":\"The first key for identification\",\"keyThree\":\"The third key for identification\",\"keyTwo\":\"The second key for identification\"}},\"withdraw(uint256,address)\":{\"details\":\"This function should be delegate called in the context of a vault.\",\"params\":{\"amount\":\"The amount to withdraw.\",\"vault\":\"The vault calling this function.\"}}},\"title\":\"IProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,address)\":{\"notice\":\"Performs a deposit at the provider on behalf of a vault.\"},\"getDepositBalance(address,address)\":{\"notice\":\"Returns the deposit balance of a user at the provider.\"},\"getDepositRate(address)\":{\"notice\":\"Returns the latest supply annual percentage rate (APR) at the provider.\"},\"getIdentifier()\":{\"notice\":\"Returns the identifier of the provider.\"},\"getSource(address,address,address)\":{\"notice\":\"Returns the source address that requires ERC20 approval for vault actions.\"},\"withdraw(uint256,address)\":{\"notice\":\"Performs a withdraw at the provider on behalf of a vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IProvider.sol\":\"IProvider\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IProvider.sol\":{\"keccak256\":\"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d75f9e4f1efd9893748acf660d7c5081ff1c0cd5c4122598cc307e30f1a47339\",\"dweb:/ipfs/QmRhAVnEqryGFuCGZcHMdSGVAvgVENrYXjKiT6fL6mXBG5\"]},\"contracts/interfaces/IVault.sol\":{\"keccak256\":\"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56c2081725fe260b313f71cc0b1d66b54b1c51442adaaac2f2e5ea6386aba032\",\"dweb:/ipfs/QmTCBtjjykZ3nTdLD96affS9ssRjjKPo9JKJYKsYJY5fXQ\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x666c704c58d4cf404eecd6e4a898a87e25b00b45416678de914e160582c3ff17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6def3cc823ae3f155da28a241a8ff91538222053ed9d78f415758a9133e211a1\",\"dweb:/ipfs/QmSriniszojh4UP4WQqxCJhq2XsbCAULcB4qRij4EYw9Gi\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"deposit","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"view","type":"function","name":"getDepositBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}]},{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"view","type":"function","name":"getDepositRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getIdentifier","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"keyOne","type":"address"},{"internalType":"address","name":"keyTwo","type":"address"},{"internalType":"address","name":"keyThree","type":"address"}],"stateMutability":"view","type":"function","name":"getSource","outputs":[{"internalType":"address","name":"source","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdraw","outputs":[{"internalType":"bool","name":"success","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"deposit(uint256,address)":{"details":"This function should be delegate called in the context of a vault.","params":{"amount":"The amount to deposit.","vault":"The vault calling this function."}},"getDepositBalance(address,address)":{"params":{"user":"The address of the user whose balance is needed.","vault":"The vault required by specific providers with multi-markets; otherwise, pass address(0)."}},"getDepositRate(address)":{"details":"Must return the rate in ray units (1e27).","params":{"vault":"The vault required by specific provider with multi-markets; otherwise, pass address(0)."}},"getSource(address,address,address)":{"details":"Some provider implementations may not require all keys.","params":{"keyOne":"The first key for identification","keyThree":"The third key for identification","keyTwo":"The second key for identification"}},"withdraw(uint256,address)":{"details":"This function should be delegate called in the context of a vault.","params":{"amount":"The amount to withdraw.","vault":"The vault calling this function."}}},"version":1},"userdoc":{"kind":"user","methods":{"deposit(uint256,address)":{"notice":"Performs a deposit at the provider on behalf of a vault."},"getDepositBalance(address,address)":{"notice":"Returns the deposit balance of a user at the provider."},"getDepositRate(address)":{"notice":"Returns the latest supply annual percentage rate (APR) at the provider."},"getIdentifier()":{"notice":"Returns the identifier of the provider."},"getSource(address,address,address)":{"notice":"Returns the source address that requires ERC20 approval for vault actions."},"withdraw(uint256,address)":{"notice":"Performs a withdraw at the provider on behalf of a vault."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IProvider.sol":"IProvider"},"evmVersion":"shanghai","libraries":{}},"sources":{"contracts/interfaces/IProvider.sol":{"keccak256":"0x2dd17877cce80d0e15354240b452608734b14561b56521c07f56fd890216c54e","urls":["bzz-raw://d75f9e4f1efd9893748acf660d7c5081ff1c0cd5c4122598cc307e30f1a47339","dweb:/ipfs/QmRhAVnEqryGFuCGZcHMdSGVAvgVENrYXjKiT6fL6mXBG5"],"license":"MIT"},"contracts/interfaces/IVault.sol":{"keccak256":"0xf42d85a1bb85932463cc87c029b24f49a2a8fbb4373a60d523254bd7028076e4","urls":["bzz-raw://56c2081725fe260b313f71cc0b1d66b54b1c51442adaaac2f2e5ea6386aba032","dweb:/ipfs/QmTCBtjjykZ3nTdLD96affS9ssRjjKPo9JKJYKsYJY5fXQ"],"license":"MIT"},"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol":{"keccak256":"0x666c704c58d4cf404eecd6e4a898a87e25b00b45416678de914e160582c3ff17","urls":["bzz-raw://6def3cc823ae3f155da28a241a8ff91538222053ed9d78f415758a9133e211a1","dweb:/ipfs/QmSriniszojh4UP4WQqxCJhq2XsbCAULcB4qRij4EYw9Gi"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330","urls":["bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf","dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"],"license":"MIT"}},"version":1},"id":8}