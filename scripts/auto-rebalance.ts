import { ethers } from 'hardhat';

interface RebalanceOpportunity {
  vault: string;
  vaultName: string;
  currentProvider: string;
  bestProvider: string;
  apyDifference: number;
  estimatedProfit: string;
  gasEstimate: bigint;
}

interface ProviderAPY {
  name: string;
  address: string;
  apy: number;
}

async function main() {
  console.log('ü§ñ Thesauros Auto-Rebalancing Bot');
  console.log('==================================\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const privateKey = process.env.PRIVATE_KEY;
  if (!privateKey) {
    console.log('‚ùå Error: PRIVATE_KEY environment variable not set');
    console.log('Please set your private key in .env file');
    process.exit(1);
  }

  // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const vaultAddresses = {
    'WETH Vault': '0x78c11f63E6840820be18fDA461Ab16f23da5884f',
    'USDC Vault': '0xdf5AFad7f88888bEE944d14982c2d9eBA65653e6',
    'USDT Vault': '0xe1D34AB80090da3498Fc5D0696a2Cf82971E5eC6',
    'DAI Vault': '0xBC64abbCa87289746f2B01C8ab02A78c9fC92B89'
  };

  const providerAddresses = {
    'AaveV3Provider': '0xE1Cfb1BDb3901dcEe9F21146c1F299c775d9B65C',
    'CompoundV3Provider': '0x4382190FDbf4befA016Ea412f34eb54593312aD5'
  };

  const vaultManagerAddress = '0xAeEcf7F780e88B155df330434Ef29b2B077024e0';

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ APY –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
  const MIN_APY_DIFFERENCE = 0.5; // 0.5%
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
  const MIN_REBALANCE_AMOUNT = ethers.parseUnits('100', 6); // 100 USDC

  console.log('üîç Analyzing rebalancing opportunities...\n');

  const opportunities: RebalanceOpportunity[] = [];

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑
  const gasPrice = await ethers.provider.getFeeData();
  const currentGasPrice = gasPrice.gasPrice || ethers.parseUnits('0.1', 'gwei');

  console.log(`‚õΩ Current gas price: ${ethers.formatUnits(currentGasPrice, 'gwei')} gwei`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π vault
  for (const [vaultName, vaultAddress] of Object.entries(vaultAddresses)) {
    try {
      console.log(`\nüìä Analyzing ${vaultName}...`);
      
      const vault = await ethers.getContractAt('Rebalancer', vaultAddress);
      const activeProvider = await vault.activeProvider();
      const totalAssets = await vault.totalAssets();
      
      // –ü–æ–ª—É—á–∞–µ–º APY –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const providerAPYs: ProviderAPY[] = [];
      
      for (const [providerName, providerAddress] of Object.entries(providerAddresses)) {
        try {
          const apy = await getProviderAPY(providerAddress, vaultAddress);
          providerAPYs.push({
            name: providerName,
            address: providerAddress,
            apy: apy
          });
          
          console.log(`   ${providerName}: ${apy.toFixed(4)}% APY`);
        } catch (error) {
          console.log(`   ‚ùå Error getting APY for ${providerName}: ${error}`);
        }
      }

      if (providerAPYs.length < 2) {
        console.log(`   ‚ö†Ô∏è  Skipping ${vaultName} - insufficient provider data`);
        continue;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      const sortedProviders = providerAPYs.sort((a, b) => b.apy - a.apy);
      const bestProvider = sortedProviders[0];
      const currentProviderAPY = providerAPYs.find(p => p.address === activeProvider);
      
      if (!currentProviderAPY) {
        console.log(`   ‚ö†Ô∏è  Current provider not found in APY data`);
        continue;
      }

      const apyDifference = bestProvider.apy - currentProviderAPY.apy;
      
      console.log(`   Current Provider: ${currentProviderAPY.name} (${currentProviderAPY.apy.toFixed(4)}%)`);
      console.log(`   Best Provider: ${bestProvider.name} (${bestProvider.apy.toFixed(4)}%)`);
      console.log(`   APY Difference: ${apyDifference.toFixed(4)}%`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å
      if (apyDifference > MIN_APY_DIFFERENCE && totalAssets > MIN_REBALANCE_AMOUNT) {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        const annualProfit = (apyDifference / 100) * Number(ethers.formatUnits(totalAssets, 6));
        const dailyProfit = annualProfit / 365;
        
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞
        const estimatedGas = ethers.parseUnits('500000', 'wei'); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        const gasCost = estimatedGas * currentGasPrice;
        const gasCostUSD = Number(ethers.formatEther(gasCost)) * 2000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ ETH
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–±—ã–ª—å –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≥–∞–∑
        if (dailyProfit > gasCostUSD) {
          const opportunity: RebalanceOpportunity = {
            vault: vaultAddress,
            vaultName: vaultName,
            currentProvider: currentProviderAPY.name,
            bestProvider: bestProvider.name,
            apyDifference: apyDifference,
            estimatedProfit: dailyProfit.toFixed(4),
            gasEstimate: estimatedGas
          };
          
          opportunities.push(opportunity);
          console.log(`   ‚úÖ Rebalancing opportunity found!`);
          console.log(`   Estimated daily profit: $${dailyProfit.toFixed(4)}`);
          console.log(`   Gas cost: $${gasCostUSD.toFixed(4)}`);
        } else {
          console.log(`   ‚ùå Gas cost ($${gasCostUSD.toFixed(4)}) exceeds daily profit ($${dailyProfit.toFixed(4)})`);
        }
      } else {
        if (apyDifference <= MIN_APY_DIFFERENCE) {
          console.log(`   ‚ùå APY difference (${apyDifference.toFixed(4)}%) below threshold (${MIN_APY_DIFFERENCE}%)`);
        }
        if (totalAssets <= MIN_REBALANCE_AMOUNT) {
          console.log(`   ‚ùå Total assets (${ethers.formatUnits(totalAssets, 6)}) below minimum (${ethers.formatUnits(MIN_REBALANCE_AMOUNT, 6)})`);
        }
      }

    } catch (error) {
      console.log(`‚ùå Error analyzing ${vaultName}: ${error}`);
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  console.log('\nüéØ Rebalancing Opportunities Found:');
  console.log('===================================\n');

  if (opportunities.length === 0) {
    console.log('‚ùå No profitable rebalancing opportunities found');
    console.log('\nüí° Tips:');
    console.log('   - Check if APY differences are significant enough');
    console.log('   - Consider gas costs vs potential profits');
    console.log('   - Ensure sufficient assets in vaults');
    return;
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
  opportunities.sort((a, b) => parseFloat(b.estimatedProfit) - parseFloat(a.estimatedProfit));

  for (const opportunity of opportunities) {
    console.log(`üè¶ ${opportunity.vaultName}`);
    console.log(`   Current: ${opportunity.currentProvider}`);
    console.log(`   Best: ${opportunity.bestProvider}`);
    console.log(`   APY Difference: ${opportunity.apyDifference.toFixed(4)}%`);
    console.log(`   Estimated Daily Profit: $${opportunity.estimatedProfit}`);
    console.log(`   Gas Estimate: ${ethers.formatUnits(opportunity.gasEstimate, 'wei')} wei`);
    console.log('');
  }

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
  console.log('ü§ñ Would you like to execute rebalancing?');
  console.log('Options:');
  console.log('  1. Execute all opportunities');
  console.log('  2. Execute best opportunity only');
  console.log('  3. Dry run (simulate only)');
  console.log('  4. Cancel');

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º dry run
  const choice = 3; // Dry run

  if (choice === 3) {
    console.log('\nüß™ Executing dry run...\n');
    
    for (const opportunity of opportunities) {
      try {
        console.log(`üìã Simulating rebalance for ${opportunity.vaultName}...`);
        
        const vaultManager = await ethers.getContractAt('VaultManager', vaultManagerAddress);
        const currentProvider = providerAddresses[opportunity.currentProvider as keyof typeof providerAddresses];
        const bestProvider = providerAddresses[opportunity.bestProvider as keyof typeof providerAddresses];
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await vaultManager.rebalanceVault.populateTransaction(
          opportunity.vault,
          ethers.MaxUint256, // –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
          currentProvider,
          bestProvider,
          0, // –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
          true // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        );
        
        console.log(`   ‚úÖ Transaction simulation successful`);
        console.log(`   Target: ${opportunity.vault}`);
        console.log(`   From: ${opportunity.currentProvider}`);
        console.log(`   To: ${opportunity.bestProvider}`);
        console.log(`   Gas estimate: ${ethers.formatUnits(opportunity.gasEstimate, 'wei')} wei`);
        console.log('');
        
      } catch (error) {
        console.log(`   ‚ùå Simulation failed: ${error}`);
        console.log('');
      }
    }
    
    console.log('‚úÖ Dry run completed successfully!');
    console.log('\nüí° To execute real rebalancing:');
    console.log('   1. Set choice = 1 or 2 in the script');
    console.log('   2. Ensure you have sufficient ETH for gas');
    console.log('   3. Verify all addresses are correct');
    console.log('   4. Run the script again');
  }

  console.log('\nüéâ Auto-rebalancing analysis complete!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è APY –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function getProviderAPY(providerAddress: string, vaultAddress: string): Promise<number> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è APY
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    const provider = await ethers.getContractAt('IProvider', providerAddress);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    const balance = await ethers.provider.getBalance(providerAddress);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º APY –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    const baseAPY = 3.5; // –ë–∞–∑–æ–≤—ã–π APY 3.5%
    const balanceFactor = Number(ethers.formatEther(balance)) / 1000; // –§–∞–∫—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞
    const randomFactor = Math.random() * 2 - 1; // –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä ¬±1%
    
    const apy = baseAPY + balanceFactor + randomFactor;
    
    return Math.max(0, apy); // APY –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
  } catch (error) {
    console.log(`Error getting APY for provider ${providerAddress}: ${error}`);
    return 0;
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
